' Gambas module file

' dfhLog- Hamradio LogBook
'     Copyright (C) 2009  Jesús Guardón, EA7DFH <ea7dfh@gmail.com>
'
'     This program is free software: you can redistribute it and/or modify
'     it under the terms of the GNU General Public License as published by
'     the Free Software Foundation, either version 3 of the License, or
'     (at your option) any later version.
'
'     This program is distributed in the hope that it will be useful,
'     but WITHOUT ANY WARRANTY; without even the implied warranty of
'     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
'     GNU General Public License for more details.
'
'     You should have received a copy of the GNU General Public License
'     along with this program.  If not, see <http://www.gnu.org/licenses/>.

Private regx As Regexp
Private bandas As New String[]
Private modos As New String[]
Private propa As New String[]
Private LL As New Latlon
Public MapLoc As Boolean = False
Private ent As New Cty
Public $iQSOn As New Integer[]
Public $iAdded2Queue As Integer
Public dwnld As New HttpClient As "_getVer"
Private $ver As String
Public $alertedMUF As Boolean = False
Public $alertedES As Boolean = False
Public $aLabels As New Collection
Private $utc As String
Public $cSpot As New Object[]
Private snd As New Sound("data/Siren.wav")

Public Function base64(st As String, Optional decode As Boolean = False) As String

    Dim ret As String

    If st Then
        If decode Then
            Shell Subst("echo \"&1\" | base64 -id", st) To ret
        Else
            Shell Subst("echo \"&1\" | base64 -", st) To ret
        Endif
        Return Trim(ret)
    Endif

End

Public Function UTCNow() As Date

    Return DateAdd(Now, gb.Hour, FMain.$utcdiff)

End

Public Function pidOf(program As String) As String 'checks if a program is running and returns its PID

    Dim gotpid As String = ""

    Try Shell "pidof " & program To gotpid

    Return gotpid

End

Public Function chkLoc(loc As String) As Boolean
    '[a-r]{2}\\d{2}|[a-r]{2}\\d{2}[a-x]{2}

    loc = Trim(loc)
    If loc Then
        regx = New Regexp(loc, "^[A-R]{2}\\d{2}[A-X]{2}$|^[A-R]{2}\\d{2}$")
        '         Debug regx.SubMatches.Count
        If regx.SubMatches.Count = 0 Then
            Return True
        Else
            Return False
        Endif
    Endif

End

'array bandas

Public Function getBandas() As String[]

    bandas = ["2190M", "160M", "80M", "40M", "30M", "20M", "17M", "15M", "12M", "10M", "6M", "4M", "2M", "70CM", "23CM", "13CM", "6CM", "3CM", "1.25CM", "6MM"]

    Return bandas

End

Public Function getModos() As String[]

    modos = ["AM", "AMTOR", "APRS", "ARQ", "ATV", "BPSK", "CHIP64", "CHIP128", "CW", "FAX", "FM", "FSK", "FSK441", "HELL", "JT44", "JT65", "JT65A", "JT65B", "JT65C", "JT6M", "LSB", "MFSK", "MFSK8", "MFSK16", "MT63", "OLIVIA", "PACKET", "PACTOR", "PSK31", "PSK63", "RTTY", "RTTYM", "SSB", "SSTV", "THRB", "TOR", "USB", "VOI"]

    Return modos

End

Public Function getPropa() As String[]

    propa = ["ACS", "AUR", "AUE", "BS", "EME", "ES", "FAI", "F2", "ION", "LOS", "MS", "RS", "SAT", "TEP", "TR", "TRS", "TRD"]

    Return propa

End

Public Function getBand(freq As Float) As String

    freq /= 1000

    Select Case freq
        Case 0.1357 To 0.1378
            ' [GB2:FCOL] FMain.Controls["lcdQRG"].ForeColor = &H00FF00&
            FMain.Controls["lcdQRG"].Foreground = &H00FF00&
            Return "2190M"
        Case 1.8 To 2.0
            ' [GB2:FCOL] FMain.Controls["lcdQRG"].ForeColor = &H00FF00&
            FMain.Controls["lcdQRG"].Foreground = &H00FF00&
            Return "160M"
        Case 3.5 To 3.8
            ' [GB2:FCOL] FMain.Controls["lcdQRG"].ForeColor = &H00FF00&
            FMain.Controls["lcdQRG"].Foreground = &H00FF00&
            Return "80M"
        Case 7.0 To 7.2
            ' [GB2:FCOL] FMain.Controls["lcdQRG"].ForeColor = &H00FF00&
            FMain.Controls["lcdQRG"].Foreground = &H00FF00&
            Return "40M"
        Case 10.1 To 10.15
            ' [GB2:FCOL] FMain.Controls["lcdQRG"].ForeColor = &H00FF00&
            FMain.Controls["lcdQRG"].Foreground = &H00FF00&
            Return "30M"
        Case 14.0 To 14.35
            ' [GB2:FCOL] FMain.Controls["lcdQRG"].ForeColor = &H00FF00&
            FMain.Controls["lcdQRG"].Foreground = &H00FF00&
            Return "20M"
        Case 18.068 To 18.168
            ' [GB2:FCOL] FMain.Controls["lcdQRG"].ForeColor = &H00FF00&
            FMain.Controls["lcdQRG"].Foreground = &H00FF00&
            Return "17M"
        Case 21.0 To 21.45
            ' [GB2:FCOL] FMain.Controls["lcdQRG"].ForeColor = &H00FF00&
            FMain.Controls["lcdQRG"].Foreground = &H00FF00&
            Return "15M"
        Case 24.89 To 24.99
            ' [GB2:FCOL] FMain.Controls["lcdQRG"].ForeColor = &H00FF00&
            FMain.Controls["lcdQRG"].Foreground = &H00FF00&
            Return "12M"
        Case 28.0 To 29.7
            ' [GB2:FCOL] FMain.Controls["lcdQRG"].ForeColor = &H00FF00&
            FMain.Controls["lcdQRG"].Foreground = &H00FF00&
            Return "10M"
        Case 50.0 To 52.0
            ' [GB2:FCOL] FMain.Controls["lcdQRG"].ForeColor = &H00FF00&
            FMain.Controls["lcdQRG"].Foreground = &H00FF00&
            Return "6M"
        Case 70.0 To 70.5
            ' [GB2:FCOL] FMain.Controls["lcdQRG"].ForeColor = &H00FF00&
            FMain.Controls["lcdQRG"].Foreground = &H00FF00&
            Return "4M"
        Case 144.0 To 146.0
            ' [GB2:FCOL] FMain.Controls["lcdQRG"].ForeColor = &H00FF00&
            FMain.Controls["lcdQRG"].Foreground = &H00FF00&
            Return "2M"
        Case 430.0 To 440.0
            ' [GB2:FCOL] FMain.Controls["lcdQRG"].ForeColor = &H00FF00&
            FMain.Controls["lcdQRG"].Foreground = &H00FF00&
            Return "70CM"
        Case 1240.0 To 1300.0
            ' [GB2:FCOL] FMain.Controls["lcdQRG"].ForeColor = &H00FF00&
            FMain.Controls["lcdQRG"].Foreground = &H00FF00&
            Return "23CM"
        Case 2300.0 To 2450.0
            ' [GB2:FCOL] FMain.Controls["lcdQRG"].ForeColor = &H00FF00&
            FMain.Controls["lcdQRG"].Foreground = &H00FF00&
            Return "13CM"
        Case 5650.0 To 5850.0
            ' [GB2:FCOL] FMain.Controls["lcdQRG"].ForeColor = &H00FF00&
            FMain.Controls["lcdQRG"].Foreground = &H00FF00&
            Return "6CM"
        Case 10000.0 To 10500.0
            ' [GB2:FCOL] FMain.Controls["lcdQRG"].ForeColor = &H00FF00&
            FMain.Controls["lcdQRG"].Foreground = &H00FF00&
            Return "3CM"
        Case 24000.0 To 24250.0
            ' [GB2:FCOL] FMain.Controls["lcdQRG"].ForeColor = &H00FF00&
            FMain.Controls["lcdQRG"].Foreground = &H00FF00&
            Return "1.25CM"
        Case 47000.0 To 47200.0
            ' [GB2:FCOL] FMain.Controls["lcdQRG"].ForeColor = &H00FF00&
            FMain.Controls["lcdQRG"].Foreground = &H00FF00&
            Return "6MM"
        Case Else
            ' [GB2:FCOL] FMain.Controls["lcdQRG"].ForeColor = Color.Red
            FMain.Controls["lcdQRG"].Foreground = Color.Red
            Return
    End Select

End

'locator formulas from Yves Goergen  (http://beta.unclassified.de/code/dotnet/maidenheadlocator/)
Public Function locator2latlon(loc As String) As Latlon

    loc = Upper(loc)
    If Len(loc) = 4 Then loc &= "LL"

    LL.lon = (Asc(loc, 1) - Asc("A")) * 20 + (Asc(loc, 3) - Asc("0")) * 2 + (Asc(loc, 5) - Asc("A") + 0.5) / 12 - 180
    LL.lat = (Asc(loc, 2) - Asc("A")) * 10 + (Asc(loc, 4) - Asc("0")) + (Asc(loc, 6) - Asc("A") + 0.5) / 24 - 90

    Return LL

End

Public Function latLong2locator(lat As Float, lon As Float) As String

    Dim v As Integer
    Dim locator As String = ""

    lat += 90
    lon += 180
    v = CInt(lon / 20)
    lon -= v * 20
    locator &= Chr$(Asc("A") + v)
    v = CInt(lat / 10)
    lat -= v * 10
    locator &= Chr$(Asc("A") + v)
    locator &= CStr(CInt(lon / 2))
    locator &= CStr(CInt(lat))
    lon -= CInt(lon / 2) * 2
    lat -= CInt(lat)
    locator &= Chr$(Asc("A") + lon * 12)
    locator &= Chr$(Asc("A") + lat * 24)

    Return locator

End

Public Function distance(lat1 As Float, lon1 As Float, lat2 As Float, lon2 As Float) As Float

    Dim dx As Float
    Dim hn As Float = Rad(lat1)
    Dim he As Float = Rad(lon1)
    Dim n As Float = Rad(lat2)
    Dim e As Float = Rad(lon2)
    Dim co As Float = Cos(he - e) * Cos(hn) * Cos(n) + Sin(hn) * Sin(n)
    Dim ca As Float = ATan(Abs(Sqr(1 - co * co) / co))

    If co < 0 Then ca = Pi - ca
    dx = 6367 * ca

    Return dx

End

Public Function distLoc(loc1 As String, loc2 As String) As Float

    Return distance(locator2latlon(loc1).lat, locator2latlon(loc1).lon, locator2latlon(loc2).lat, locator2latlon(loc2).lon)

End

Public Function bearing(lat1 As Float, lon1 As Float, lat2 As Float, lon2 As Float) As Float

    Dim az, si As Float
    Dim hn As Float = Rad(lat1)
    Dim he As Float = Rad(lon1)
    Dim n As Float = Rad(lat2)
    Dim e As Float = Rad(lon2)
    Dim co As Float = Cos(he - e) * Cos(hn) * Cos(n) + Sin(hn) * Sin(n)
    Dim ca As Float = ATan(Abs(Sqr(1 - co * co) / co))

    If co < 0 Then ca = Pi - ca
    si = Sin(e - he) * Cos(n) * Cos(hn)
    co = Sin(n) - Sin(hn) * Cos(ca)
    az = ATan(Abs(si / co))
    If co < 0 Then az = Pi - az
    If si < 0 Then az = az * -1
    If az < 0 Then az = az + 2 * Pi

    Return Deg(az)

End

Public Function bearingLoc(loc1 As String, loc2 As String) As Float

    Dim b As Float

    If loc1 = loc2 Then
        b = 0
    Else
        b = bearing(locator2latlon(loc1).lat, locator2latlon(loc1).lon, locator2latlon(loc2).lat, locator2latlon(loc2).lon)
    Endif

    Return b

End

Public Function parseFecha(fecha As String) As String

    Dim Y, M, D, nF As String
    Dim F As String[]
    'PRINT fecha
    fecha = Left(fecha, 10)
    If fecha Then
        F = Split(fecha, "/")
        Y = F[2]
        M = F[0]
        D = F[1]
        nF = D & "/" & M & "/" & Y
    Endif
    If Not Error Then
        Return nF
    Else
        Return fecha
    Endif
Catch
    Debug Error.Text, Error.Where

End

Public Function clusterColor(call As String, band As String) As Integer

    Dim colorDX As Integer
    Dim entidad As String
    Dim hresul As Result

    ent = world.findEntity(call)
    If ent <> Null Then
        entidad = ent.entity
        If FMain.connDB() Then Return
        hResul = dbLog.cnLog.Exec("SELECT qsl_rcvd, band FROM log WHERE country = &1 AND band= &2;", entidad, band)
        If Not hResul.Available Then
            'DEBUG call, band, hResul!QSL_r
            colorDX = FMain.ini["Colores/Necesitado", Color.Blue]
        Else
            Do While hResul.Available
                If hResul!qsl_rcvd = "Y" Then
                    'DEBUG call, band, hResul!QSL_r
                    colorDX = FMain.ini["Colores/Confirmado", Color.Green]
                    Exit
                Else
                    'DEBUG call, band, hResul!QSL_r
                    colorDX = FMain.ini["Colores/Trabajado", Color.Orange]
                Endif
                hResul.MoveNext()
            Loop
        Endif

    Endif
    Return colorDX

Catch
    Debug Error.Text, Error.Where

End

Public Sub addToQueue(id As Integer)

    Dim hres As Result
    Dim sql, sql1 As String

    If id <> Null Then
        sql1 = "INSERT OR IGNORE INTO qQSL "
        sql = "SELECT id, operator, call, qso_date, time_on, band, mode, prop_mode, rst_sent, gridsquare, " &
            "my_gridsquare, qsl_via, qsl_rcvd, qsl_sent FROM log WHERE id=&1 AND qsl_sent <> 'Y';"
        If FMain.connDB() Then Return
        hres = dbLog.cnLog.Exec(sql, id)
        If hres.Available
            Inc $iAdded2Queue
            dbLog.cnLog.Exec(sql1 & sql, id)
        Endif
    Endif

Catch
    Message.Error(Error.Text, Error.Where)

End

Public Sub saveADIF(myFile As String)

    Dim hres As Result
    Dim sql As String
    Dim crlf As String
    Dim sField As String
    Dim hFile As File
    Dim L As Integer
    Dim hField As ResultField
    Dim i As Integer

    crlf = Chr$(13) & Chr$(10)

    $iQSOn.Sort()

    ' [GB2:OPEN] OPEN myFile FOR WRITE CREATE AS #hFile
    hFile = Open myFile For Write Create
    Print #hFile, "ADIF file created by dfhLog v." & application.Version & " (c) EA7DFH," &
    crlf & "distributed under the GPL GNU Licence " & crlf & "<EOH>" & crlf & crlf

    If dbLog.connDB(FMain.ini["Log/File"]) Then Return
    For i = 0 To $iQSOn.Count - 1
        sql = "SELECT * FROM log WHERE id=&1 ORDER BY id;"
        hres = dbLog.cnLog.Exec(sql, $iQSOn[i])

        Do While hres.Available

            For Each hField In hres.Fields
                With hField
                    L = Len(Trim(Str(hres[.Name])))
                    If L > 0 And .Name <> "id" And .Name <> "dxcc" Then
                        sField = Trim(Str(hres[.Name]))
                        Select Case .Name
                            Case "qso_date", "qslrdate", "qslsdate"
                                sField = Year(hres!qso_date) & Format(Month(hres!qso_date), "0#") & Format(Day(hres!qso_date), "0#")
                                L = Len(sField)
                            Case "time_on", "time_off"
                                sField = Left(Replace(hres[.Name], ":", ""), 4)
                                L = Len(sField)
                            Case "mode"
                                If sField = "USB" Or sField = "LSB" Then sField = "SSB"
                            Case Else
                                sField = Trim(Str(hres[.Name]))
                        End Select
                        Print #hFile, "<" & Upper(.Name) & ":" & Str(L) & ">" & sField;
                    Endif
                End With
            Next
            Print #hFile, " <EOR>"
            Wait 0.01
            hres.MoveNext()
        Loop
    Next

Finally
    Close #hFile

Catch
    Message.Error(("Error exporting Record\n") & hField!call & " " & hField!qso_date & "\n" & Error.Text)

End

Public Sub getVersion()

    Dim distro As String

    Shell "cat /etc/issue" To distro
    distro = Replace(distro, "\\n \\l", "")
    distro = Replace(distro, " ", "_")
    $ver = ""
    dwnld.Async = True
    dwnld.Timeout = 5
    dwnld.URL = "http://www.ea7dfh.com/dfhlog/version.php?call=" & FMain.ini["Estacion/QRZ"] & "&loc=" & FMain.ini["Estacion/Locator"] & "&ver=" & Application.Version & "&dist=" & distro
    dwnld.Get()

End

Public Sub _getVer_Read()

    Dim buffer As String

    Read #Last, buffer, Lof(Last)
    $ver &= buffer
Catch
    Debug Error.Text, Error.Where

End

Public Sub _getVer_Error()

    Debug "Error downloading Version number\n" & dwnld.Status, Error.Text

End

Public Sub _getVer_Finished()

    Dim myVersion, curVersion As Float = CFloat("1." & Replace(Application.Version, ".", ""))

    If $ver Then
        $ver = Left($ver, -1)
        $ver = "1." & Replace($ver, ".", "")
        curVersion = CFloat($ver)
        '         Debug curVersion, myVersion
        If curVersion > myVersion Then
            If Message.Question(("There is a new version of dfhLog.\nDo you want to visit the download page?"), ("Yes"), ("No")) = 2 Then Return
            Desktop.Open("http://code.google.com/p/dfhlog/downloads/list")
        Endif
    Endif
Catch
    Debug Error.Text, Error.Where

End

Public Function unixTS() As Integer 'returns unix timestamp

    Dim dt As Date

    dt = Date(1970, 1, 1, 0, 0, 0)
    Return DateDiff(dt, Now, gb.Second)

End

Public Sub processMapSpots(dxLine As String) 'insert data into spots table to plot dx lines on map

    Dim DX, spotter, band, remarks, prop, loc1, loc2 As String
    Dim freq As Float
    Dim loc As String[]
    Dim regx As Regexp
    Dim sql As String = "INSERT INTO spots VALUES(&1,&2,&3,&4,&5,&6,&7);"

    spotter = Mid(dxLine, 7, InStr(dxLine, ":") - 7) 'something weird happens when spotter contains "/" !?!?
    DX = Trim(Mid(dxLine, 27, 10))
    freq = CFloat(Trim(Mid(dxLine, 15, 10)))
    band = global.getBand(freq)
    remarks = Trim(Mid(dxLine, 37, 34))
    regx = New Regexp(remarks, "(?i)([a-r]{2}\\d{2}[a-x]{2}|[a-r]{2}\\d{2})\\s?([\\s<(:]([a-z]{2,5})[\\s>):]|-|->|>|/|><|<->|<>)\\s?(([a-r]{2}\\d{2}[a-x]{2}|[a-r]{2}\\d{2}))")
    If regx.SubMatches.Count = 5 Then
        loc1 = Upper(regx.SubMatches[1].Text)
        prop = Upper(regx.SubMatches[3].Text)
        loc2 = Upper(regx.SubMatches[4].Text)
        If FMain.connDB() Then Return
        dbLog.cnLog.Exec(sql, unixTS(), band, spotter, DX, loc1, loc2, prop)
        dbLog.cnLog.Exec("DELETE FROM spots WHERE timestamp < &1;", (unixTS() - FMain.ini["FMapLoc/DXTime", 1800]))
    Endif
    alertMUF
Catch
    Debug Error.Text & "\n" & Error.Where & "\n" & dxLine

End

Public Sub alertMUF()

    Dim hres As Result
    Dim sql As String
    Dim spotMUF, spotES As Integer

    sql = "SELECT * from spots WHERE band='6M' AND prop='ES';"
    If FMain.connDB() Then Return
    hres = dbLog.cnLog.Exec(sql)
    spotMUF = hres.Count
    sql = "SELECT * from spots WHERE band='2M' AND prop='ES';"
    hres = dbLog.cnLog.Exec(sql)
    spotES = hres.Count

    If spotES >= 3 And $alertedES = False Then
        If FMain.ini["FMapLoc/MUFAlert"] = True Then snd.Play()
        $alertedES = True
    Else If spotES < 3 And $alertedES = True
        $alertedES = False
    Endif

    If spotMUF > 3 And $alertedMUF = False Then
        If FMain.ini["FMapLoc/MUFAlert"] = True Then snd.Play()
        $alertedMUF = True
    Else If spotMUF < 3 And $alertedMUF = True
        $alertedMUF = False
    Endif
Catch
    Debug Error.Text, Error.Where

End
