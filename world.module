' Gambas module file

' private

PRIVATE ent AS cty
PRIVATE file AS File
PRIVATE prefix AS String
PRIVATE qrz AS String
PRIVATE prefixa AS String
PRIVATE prefixab AS String 
PRIVATE cqzone AS Integer
PRIVATE ituzone AS Integer
PRIVATE number AS Integer
PRIVATE nmap AS Collection
PRIVATE map AS Collection

'public
PUBLIC listDxcc AS NEW Collection
PUBLIC created AS Boolean


PUBLIC SUB init()
    DIM data, linea AS String
    DIM lines, fields AS String[]
    DIM finalPrefix AS String
    DIM prefixes AS String[]
    lines = NEW String[]
    fields = NEW String[]
    prefixes = NEW String[]
    nmap = NEW Collection 'Coleccion de clases nº/cty
    map = NEW Collection  'Coleccion de prefijos/nº 
    prefix = NULL
    cqzone = 0
    ituzone = 0
    created = FALSE
    number = 1
  
  'create local dir
    IF NOT Exist(User.Home &/ "/.dfh_Log/cty.dat") THEN
  
        TRY MKDIR User.Home &/ "/.dfh_Log/"
        TRY COPY "cty.dat" TO User.Home &/ "/.dfh_Log/cty.dat"
        
    ENDIF 
  
    file = OPEN User.Home &/ "/.dfh_Log/cty.dat" FOR INPUT  
  
    READ #file, data, Lof(file)
  
    lines = Split(data, ";", "\r\n", TRUE)
   
        FOR EACH linea IN lines  
              ent = NEW cty
              
              fields = Split(linea, ":")
              
              cqzone = CInt(fields[1])
              ituzone = CInt(fields[2])
              ent.number = number
              ent.entity = Trim$(fields[0])
              ent.pfx = Trim$(fields[7])
              ent.cqz = cqzone
              ent.lon = CFloat(fields[5]) * -1  'la longitud viene como W -> positivo
              ent.lat = CFloat(fields[4])
              ent.continent = Trim$(fields[3])
              ent.ituz = ituzone
              ent.tz = CFloat(fields[6])
              ent.pfxs = Trim$(fields[8])
              nmap.Add(ent, CStr(number)) 'coleccion de entidades
              listDxcc.Add(ent.entity, CStr(number)) 'coleccion de nombre entidad, numero
              prefixes = Split(ent.pfxs, ",", "\r\n", TRUE)
                
              
                FOR EACH finalPrefix IN prefixes
                    map.Add(number, Trim$(Replace$(finalPrefix, "=", ""))) 'coleccion de prefijos/nº ent
                    'TODO manejo de prefijos especiales con diferente zona(cq)[itu]
                NEXT
              
            INC number
        NEXT   
  
    CLOSE file
    created = TRUE  
END
    'devuelve una clase cty por cadena completa de indicativo
PUBLIC FUNCTION findEntity(call AS String) AS cty
    DIM y AS Integer
    DIM cad AS String
    call = Trim$(Upper(call))
    
        IF InStr(call, "/") > 0 THEN 
        prefixa = Left(call, InStr(call, "/"))
        prefixab = Right(call, Len(call) - InStr(call, "/"))
            IF Len(prefixa) < Len(prefixab) THEN 
                call = prefixa
              ELSE
                IF prefixab <> "P" AND prefixab <> "MM" AND prefixab <> "B" AND prefixab <> "M" AND prefixab <> "QRP" AND prefixab <> "AM" AND NOT IsNumber(prefixab) THEN
                      call = prefixab
                  ENDIF
                  
            ENDIF 
        ENDIF 
        'magic statement
        FOR y = Len(call) TO 1 STEP -1
             FOR EACH cad IN map
                  IF Left(call, y) = map.Key THEN 
                      RETURN nmap[map[map.Key]]
                  BREAK 
                  ENDIF
             NEXT
            
        NEXT
        
        CATCH 
            DEBUG Error.Text, Error.Where
  
END


    'devuelve el nº de entidad por prefijo dado
PUBLIC FUNCTION giveEnt(tqrz AS String) AS Integer
    qrz = tqrz
        RETURN CInt(map[qrz])
  
END


  'busca por numero en la colección map y devuelve la clase cty correspondiente
PUBLIC FUNCTION getEntByNumb(numero AS Integer) AS cty
        
        numero = CStr(numero)  
        RETURN nmap[numero]    
 
END 






























