' Gambas class file

' dfhLog- Hamradio LogBook
'     Copyright (C) 2009  Jesús Guardón, EA7DFH <ea7dfh@gmail.com>
'
'     This program is free software: you can redistribute it and/or modify
'     it under the terms of the GNU General Public License as published by
'     the Free Software Foundation, either version 3 of the License, or
'     (at your option) any later version.
'
'     This program is distributed in the hope that it will be useful,
'     but WITHOUT ANY WARRANTY; without even the implied warranty of
'     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
'     GNU General Public License for more details.
'
'     You should have received a copy of the GNU General Public License
'     along with this program.  If not, see <http://www.gnu.org/licenses/>.

Private I As Integer = 0
Public c As Cty
Private qrz As String
Public ini As Settings
Public lblini As Settings
Public qslini As Settings
Static en As Boolean
Public p As Process
Public p_hamlib As Process
Private L As String
Private qrzcom As QRZ
Private hamqth As HQTH
Private cdx As Cty
Private freq As String
Private mylat As Float
Private mylon As Float
Private stoppedTime As String
Private stopped As Boolean = False
Private $mode As String
Private $markedSpot As Boolean = False
Private $i As Integer
Private $cEntities As New Collection
Private pRigctl As Process
Private $homecall As String
Private $cbm As Object
Private TrayIcon1 As TrayIcon = New TrayIcon As "TrayIcon1"
Public modificando As Boolean = False
Public sTPEA As String
Public sIOTA As String
Public sWAS As String
Public sUSAC As String
Public $qrzCom As Integer
Public hProcess As Process
Public $utcdiff As Integer
Public $hamlibconnected As Boolean = False
' menus
Private $hmenu As New Menu(Me)
Private $hmenuInfo As Menu
Private $hmenuSep As Menu
Private $hmenuEdit As Menu
Private $hmenuDel As Menu
Private $hmenuQSLr As Menu
Private $hmenuQSLs As Menu
Private $hmenuNQSLr As Menu
Private $hmenuNQSLs As Menu
Private $hmenuPrint As Menu
Private $currentBand As String = ""
Private snd As New Sound("data/beep.wav")

Property Read cBand As String

Public Sub _new()

    Try world.init()
    If Exist(User.Home &/ ".dfh_Log") Then Shell "rm -r " & User.Home &/ ".dfh_Log"
    ini = New Settings(User.Home &/ ".config/dfhlog/dfhlog.conf", "dfhLog Settings")
    lblini = New Settings(User.Home &/ ".config/dfhlog/labels.conf", "Labels Settings")
    qslini = New Settings(User.Home &/ ".config/dfhlog/printQSL.conf", "printQSL")
    If Not Exist(User.Home &/ ".config/dfhlog/dfhlog.png") Then Copy "icons/dfhlog.png" To User.Home &/ ".config/dfhlog/dfhlog.png"
    If Not Exist(User.Home &/ ".xplanet/config/dfh") Then
        Try Mkdir User.Home &/ ".xplanet/"
        Try Mkdir User.Home &/ ".xplanet/config/"
        Try Mkdir User.Home &/ ".xplanet/markers/"
        Try Mkdir User.Home &/ ".xplanet/origin/"
        Try Copy "data/dfh" To User.Home &/ ".xplanet/config/dfh"
        Try Copy "data/do" To User.Home &/ ".xplanet/origin/do"
    Endif
    If Not Exist(User.Home &/ ".config/dfhlog/tablas.db") Then Try Copy "data/tablas.db" To User.Home &/ ".config/dfhlog/tablas.db"
    $utcdiff = ini["UTC/offset", -1]

Catch
    Message.Error(("Error in Fmain_new\n") & Error.Text & "\n" & Error.Where)

End

Private Sub createMenu()

    $hmenuInfo = New Menu($hmenu)

    $hmenuSep = New Menu($hmenu)
    $hmenuSep.Text = ""

    $hmenuEdit = New Menu($hmenu) As "mnuEditarQSO"
    $hmenuEdit.Text = ("Edit QSO")
    $hmenuEdit.Picture = Picture["icons/gtk-edit.png"]
    $hmenuEdit.Shortcut = "Ctrl+E"

    $hmenuDel = New Menu($hmenu) As "mnuBorrarQSO"
    $hmenuDel.Text = ("Delete QSO")
    $hmenuDel.Picture = Picture["icons/gtk-delete.png"]
    $hmenuDel.Shortcut = "Ctrl+D"

    $hmenuSep = New Menu($hmenu)
    $hmenuSep.Text = ""

    $hmenuQSLr = New Menu($hmenu) As "mnuQSLrec"
    $hmenuQSLr.Text = ("Check QSL as recvd.")
    $hmenuQSLr.Picture = Picture["icons/gtk-redo-rtl.png"]
    $hmenuQSLr.Shortcut = "F5"

    $hmenuQSLs = New Menu($hmenu) As "mnuQSLenv"
    $hmenuQSLs.Text = ("Check QSL as sent.")
    $hmenuQSLs.Picture = Picture["icons/gtk-undo-rtl.png"]
    $hmenuQSLs.Shortcut = "F6"

    $hmenuSep = New Menu($hmenu)
    $hmenuSep.Text = ""

    $hmenuNQSLr = New Menu($hmenu) As "mnuQSLnotrec"
    $hmenuNQSLr.Text = ("Uncheck QSL as recvd.")
    $hmenuNQSLr.Picture = Picture["icons/gtk-redo-not.png"]
    $hmenuNQSLr.Shortcut = "F7"

    $hmenuNQSLs = New Menu($hmenu) As "mnuQSLnotenv"
    $hmenuNQSLs.Text = ("Uncheck QSL as sent.")
    $hmenuNQSLs.Picture = Picture["icons/gtk-undo-not.png"]
    $hmenuNQSLs.Shortcut = "F8"

    $hmenuSep = New Menu($hmenu)
    $hmenuSep.Text = ""

    $hmenuPrint = New Menu($hmenu) As "mnuPrintQSL"
    $hmenuPrint.Text = ("Print QSL")
    $hmenuPrint.Picture = Picture["icons/gtk-print.png"]
    $hmenuPrint.Shortcut = "Ctrl+P"

End

Public Sub Form_Close()

    ini["Window/Top"] = Me.ScreenY
    ini["Window/Left"] = Me.ScreenX
    ini["Window/Height"] = Me.Height
    ini["Window/Width"] = Me.Width
    ini["SplitterV/pos"] = VSplit1.Settings
    ini["GrdQSO/Settings"] = grdQSO.Settings
    ini["Estacion/Propa"] = cboPropa.Text
    ini.Save()

    If sktCluster.Status = Net.Connected Then
        sktCluster.Close()
        sktCluster = Null
    Endif
    If sktHamlib.Status = Net.Connected Then
        sktHamlib.Close()
        sktHamlib = Null
    Endif
    dbLog.CloseDB()
    Shell "killall rigctld grig"
    Timer1.Stop
    timerCAT.Stop
    TimerQSO.Stop
    Wait 0.01

Catch
    Message.Error(("Error in Form Close\n") & Error.Text & "\n" & Error.Where)

End

Public Sub Form_Open()

    Dim hResul As Result
    Dim i As Integer = 1
    Dim propa, banda, modo, entidad As String

    Me.Title = "dfhLog - v " & Application.Version & " - " & ini["Estacion/QRZ"]
    lcdQRG.Visible = False
    If world.created Then
        c = New Cty
        cdx = New Cty
        mylat = global.locator2latlon(ini["Estacion/Locator"]).lat
        mylon = global.locator2latlon(ini["Estacion/Locator"]).lon
    Else
        Message("Problema al cargar cty.dat")
        Me.Close()
    Endif

    Me.Left = ini["Window/Left", Me.Left]
    Me.Top = ini["Window/Top", Me.Top]
    Me.Height = ini["Window/Height", Me.Height]
    Me.Width = ini["Window/Width", Me.Width]
    VSplit1.Settings = ini["SplitterV/pos"]
    checkSettings()
    cboPropa.List = global.getPropa()
    cboFreq.List = global.getBandas()
    cboModo.List = global.getModos()
    cboEntidad.Add("")
    For i = 1 To world.listDxcc.Count - 1
        cboEntidad.Add(world.listDxcc[i])
    Next
    If ini["Hamlib/Activado"] = True Then
        btnCAT.Enabled = True
    Else
        btnCAT.Enabled = False
    Endif
    If ini["Xplanet/Activado"] = True Then
        btnMap.Enabled = True
    Else
        btnMap.Enabled = False
    Endif
    cboFreq.Text = ini["Estacion/PrefBanda"]
    cboModo.Text = ini["Estacion/PrefModo"]
    cboPropa.Text = ini["Estacion/Propa"]
    lblPath.Text = "Log: " & ini["Log/File"]
    chkRT.Value = ini["Main/RT", False]
    $qrzCom = ini["qrzCom/Value", 0]
    vFecha.Value = global.UTCNow() 'Format(global.UTCNow(), "dd/mm/yyyy")
    vHora.Value = Format(global.UTCNow(), "hh:nn:ss")
    vHora2.Value = Format(global.UTCNow(), "hh:nn:ss")
    tabLC[2].Visible = False
    prepareStatsGrid
    Exec ["killall", "rigctld"]
    qrzcom = New QRZ As "qrzcom"
    hamqth = New HQTH As "hamqth"
    tblCluster.Columns.Count = 1
    tblCluster.Rows.Height = 10
    prepararGrid()
    createMenu()
    prepareWkdB4()
    If ini["webbrowser/disabled", False] Then tabLC[4].Visible = False
    If ini["Log/File"] = Null Or Not Exist(ini["Log/File"]) Then
        btnNewLog_Click()
    Else
        connDB()
        fillData()
    Endif

    Try global.getVersion()
    txtCall.SetFocus()

Catch
    Message.Error(("Error in Form Load\n") & Error.Text & "\n" & Error.Where)

End

Public Sub cboModo_Click()

    Dim S As String

    If modificando = False Then
        Select Case cboModo.Text
            Case "SSB", "USB", "LSB", "AM", "FM"
                txtRSTe.Text = 59
                txtRSTr.Text = 59
            Case "JT65A", "JT65B", "JT65C"
                txtRSTe.Text = "OOO"
                txtRSTr.Text = "OOO"
            Case Else
                txtRSTe.Text = 599
                txtRSTr.Text = 599
        End Select

        If sktHamlib.Status = Net.Connected Then
            Select Case cboModo.Text
                Case "SSB", "USB"
                    S = "M USB 0\r\n"
                    Try Write #sktHamlib, S, Len(S)
                Case "LSB"
                    S = "M LSB 0\r\n"
                    Try Write #sktHamlib, S, Len(S)
                Case "AM"
                    S = "M AM 0\r\n"
                    Try Write #sktHamlib, S, Len(S)
                Case "FM"
                    S = "M FM 0\r\n"
                    Try Write #sktHamlib, S, Len(S)
                Case "RTTY", "FSK"
                    S = "M RTTY 0\r\n"
                    Try Write #sktHamlib, S, Len(S)
                Case "CW"
                    S = "M CW 0\r\n"
                    Try Write #sktHamlib, S, Len(S)
                Case Else
                    S = "M USB 0\r\n"
                    Try Write #sktHamlib, S, Len(S)
            End Select
        Endif
    Endif

End

Public Function connDB() As Boolean

    Return dbLog.connDB(ini["Log/File"])

End

Public Sub descDB()

    dbLog.CloseDB()

End

Private Sub checkSettings()

    If ini["Estacion/QRZ"] = Null Then FPref.ShowModal

End

Public Sub Salir_Click()

    Me.Close

End

Public Sub txtCall_Change()

    txtCall.Text = Upper(txtCall.Text)
    If Len(txtCall.Text) > 1 Then
        'IF modificando = FALSE THEN
        Try buscar()
        Select Case cboModo.Text
            Case "SSB", "USB", "LSB", "AM", "FM"
                txtRSTe.Text = 59
                txtRSTr.Text = 59
            Case "JT65A", "JT65B", "JT65C"
                txtRSTe.Text = "OOO"
                txtRSTr.Text = "OOO"
            Case Else
                txtRSTe.Text = 599
                txtRSTr.Text = 599
        End Select
    Else
        clearFields()
        clearTblStats()
        btnShwqrz.Enabled = False
        If en Then
            stopped = False
        Endif
        lblQSOTimer.Visible = False
    Endif

End

Public Sub cboEntidad_Click()

    If cboEntidad.Index > 0 Then
        c = world.getEntByNumb(cboEntidad.Index)
        If c <> Null Then
            lblCont.Caption = c.continent
            lblPfx.Caption = c.pfx
            lblCQ.Caption = c.cqz
            lblITU.Caption = c.ituz
            lblDist.Caption = Round(global.distance(c.lat, c.lon, mylat, mylon), -1) & " Km"
            lblRumbo.Caption = Round(global.bearing(mylat, mylon, c.lat, c.lon), -1) & " Deg"
        Endif
    Endif

Catch
    Message.Error(("Error in cboEntidad QSO\n") & Error.Text & "\n" & Error.Where)

End

Private Sub buscar()

    qrz = txtCall.Text
    If qrz Then
        c = world.findEntity(qrz)
        If c <> Null Then
            cboEntidad.Text = c.entity
            lblCont.Caption = c.continent
            lblPfx.Caption = c.pfx
            lblCQ.Caption = c.cqz
            lblITU.Caption = c.ituz
            lblDist.Caption = Round(global.distance(c.lat, c.lon, mylat, mylon), -1) & (" Km")
            lblRumbo.Caption = Round(global.bearing(mylat, mylon, c.lat, c.lon), -1) & (" Deg")
            update_stats
        Else
            clearFields
        Endif
    Endif

Catch
    Message.Error(("Error in buscar\n") & Error.Text & "\n" & Error.Where)

End

Public Sub getWkdCfd(country As String, band As String)

    Dim colorDX As Integer
    Dim hresul As Result

    If country Then
        If connDB() Then Return
        hResul = dbLog.cnLog.Exec("SELECT qsl_rcvd, band FROM log WHERE country = &1 AND band=&2;", country, band)
        If Not hResul.Available Then
            'DEBUG call, band
            colorDX = FMain.ini["Colores/Necesitado", Color.Blue]
            lblWorked.Text = ("New DXCC on ") & band
            ' [GB2:FCOL] lblWorked.ForeColor = colorDX
            lblWorked.Foreground = colorDX
        Else
            Do While hResul.Available
                If hResul!qsl_rcvd = "Y" Then
                    'DEBUG call, band, hResul!QSL_r
                    colorDX = FMain.ini["Colores/Confirmado", Color.Green]
                    lblWorked.Text = ("DXCC Confirmed on ") & band
                    ' [GB2:FCOL] lblWorked.ForeColor = colorDX
                    lblWorked.Foreground = colorDX
                    Exit
                Else
                    'DEBUG call, band, hResul!QSL_r
                    colorDX = FMain.ini["Colores/Trabajado", Color.Orange]
                    lblWorked.Text = ("DXCC Worked on ") & band
                    ' [GB2:FCOL] lblWorked.ForeColor = colorDX
                    lblWorked.Foreground = colorDX
                Endif
                hResul.MoveNext()
            Loop
        Endif
        'FMain.descDB()
    Endif

Catch
    Debug Error.Text, Error.Where

End

Public Sub getSqWkdCfd(sq As String, band As String)

    Dim colorDX As Integer
    Dim hresul As Result

    sq = Left(sq, 4)
    If sq <> Null Then
        If connDB() Then Return
        hResul = dbLog.cnLog.Exec("SELECT qsl_rcvd, band FROM log WHERE gridsquare LIKE '" & sq & "%' AND band='" & band & "';")
        If Not hResul.Available Then
            'DEBUG sq, band
            colorDX = FMain.ini["Colores/Necesitado", Color.Blue]
            lblSqWorked.Text = sq & (" New square on ") & band
            ' [GB2:FCOL] lblSqWorked.ForeColor = colorDX
            lblSqWorked.Foreground = colorDX
        Else
            Do While hResul.Available
                If hResul!qsl_rcvd = "Y" Then
                    'DEBUG sq, band, hResul!QSL_r
                    colorDX = FMain.ini["Colores/Confirmado", Color.Green]
                    lblSqWorked.Text = sq & (" Square Cfmd on ") & band
                    ' [GB2:FCOL] lblSqWorked.ForeColor = colorDX
                    lblSqWorked.Foreground = colorDX
                    Break
                Else
                    'DEBUG sq, band, hResul!QSL_r
                    colorDX = FMain.ini["Colores/Trabajado", Color.Red]
                    lblSqWorked.Text = sq & (" Square Wkd on ") & band
                    ' [GB2:FCOL] lblSqWorked.ForeColor = colorDX
                    lblSqWorked.Foreground = colorDX
                Endif
                hResul.MoveNext()
            Loop
        Endif
        'FMain.descDB()
    Endif

Catch
    Debug Error.Text, Error.Where

End

Public Sub cboFreq_Click() ' changed due to new behavior of click event of combobox

    If $currentBand <> cboFreq.Text Then bandChanged
    $currentBand = cboFreq.Text

End

Public Sub bandChanged() ' changed due to new behavior of click event of combobox

    If c <> Null Then getWkdCfd(c.entity, cboFreq.Text)
    getSqWkdCfd(txtLocQSO.Text, cboFreq.Text)
    FBandMap.getBandLimits(cboFreq.Text)

End

Public Sub Timer1_Timer()

    Dim sAux As String

    Label2.Caption = Format(global.UTCNow(), "dd/mm/yyyy hh:nn:ss Z")
    Shell "ps aux | grep [f]ldigi" To sAux
    If sAux And modificando = False Then Try fldigiXMLRPC

End

Public Sub options_Click()

    FPref.ShowModal()

End

Public Sub TimerQSO_Timer()

    vFecha.Value = global.UTCNow() 'Format(global.UTCNow(), "dd/mm/yyyy")
    If stopped Then
        vHora.Value = stoppedTime
    Else
        vHora.Value = Format(global.UTCNow(), "hh:nn:ss")
    Endif
    vHora2.Value = Format(global.UTCNow(), "hh:nn:ss")
    lblQSOTimer.Text = ("QSO duration: ") & CDate(CDate(vHora2.Value) - CDate(vHora.Value))

End

Public Sub chkRT_Click()

    If en = True Then
        en = False
        TimerQSO.Enabled = False
        lblQSOTimer.Visible = False
        vFecha.Enabled = True
        vHora.Enabled = True
        vHora2.Enabled = True
        ' [GB2:FCOL] vFecha.ForeColor = Color.Black
        vFecha.Foreground = Color.Black
        ' [GB2:FCOL] vHora.ForeColor = Color.Black
        vHora.Foreground = Color.Black
        ' [GB2:FCOL] vHora2.ForeColor = Color.Black
        vHora2.Foreground = Color.Black
    Else
        TimerQSO.Enabled = True
        'TimerQSO2.Enabled = TRUE
        vFecha.Enabled = False
        vHora.Enabled = False
        vHora2.Enabled = False
        ' [GB2:FCOL] vFecha.ForeColor = Color.DarkGray
        vFecha.Foreground = Color.DarkGray
        ' [GB2:FCOL] vHora.ForeColor = Color.DarkGray
        vHora.Foreground = Color.DarkGray
        ' [GB2:FCOL] vHora2.ForeColor = Color.DarkGray
        vHora2.Foreground = Color.DarkGray
        en = True
    Endif
    ini["Main/RT"] = en
    ini.Save()

End

Public Sub btnPrefs_Click()

    FPref.ShowModal()

End

Public Sub btnSearch_Click()

    mnuSearch_Click()

End

Public Sub txtCall_LostFocus()

    Dim pa, pb As String
    Dim call As String = txtCall.Text
    Dim homecall As String

    If Len(txtCall.Text) > 2 And ini["Estacion/TimeOnOff", False] = False Then
        stopped = True
        stoppedTime = vHora.Value
        If en Then lblQSOTimer.Visible = True
    Endif

    If ini["qrzCom/Value"] = 1 Or ini["qrzCom/Value"] = 2 Or ini["qrzCom/Value"] = 3 Then
        If Len(txtCall.Text) > 2 Then
            If InStr(call, "/") > 0 Then
                pa = Left(call, InStr(call, "/") - 1)
                pb = Right(call, Len(call) - InStr(call, "/"))
                'homecall QRZ search
                If Len(pa) > Len(pb) Then
                    homecall = pa
                Else
                    homecall = pb
                Endif
            Else
                homecall = call
            Endif
            ' search in selected callbook
            searchCallbook(homecall)
        Endif
    Endif
    $homecall = homecall
    If c <> Null And Len(call) > 2 Then getWkdCfd(c.entity, cboFreq.Text)
    If sktHamlib.Status = Net.Connected And modificando = False Then txtFreq.Text = Left(lcdQRG.Text, Len(lcdQRG.Text) - 1)

    wkdB4(call) 'worked before?
    btnOK.Default = True

Catch
    Debug "Error in txtCall_LostFocus\n" & Error.Text & "\n" & Error.Where

End

Private Sub searchCallbook(call As String)

    If FMain.ini["qrzCom/Value"] = 3
        hamqth.getHamqth(call) 'search in HamQTH
    Else
        qrzcom.getQRZcom(call) 'search in qrz.com
    Endif

End

Private Sub wkdB4(call As String)

    Dim hres As Result
    Dim sql As String
    Dim r As Integer

    If call Then
        If connDB() Then Return
        sql = "SELECT id, call, band, qso_date, time_on, qsl_rcvd, qsl_sent FROM log WHERE call LIKE &1 ORDER BY id DESC;"
        hres = dbLog.cnLog.Exec(sql, call)
        tabLC[2].Visible = If(hres.Count > 0, True, False)
        grdWkdB4.Rows.Count = hres.Count
        tabLC[2].Text = ("&Wkd Before") & " (" & hres.Count & ")"
        Do While hres.Available
            grdWkdB4[r, 0].Text = hres!id
            grdWkdB4[r, 1].Text = hres!call
            grdWkdB4[r, 2].Text = hres!band
            grdWkdB4[r, 3].Text = Day(hres!qso_date) & "/" & Month(hres!qso_date) & "/" & Year(hres!qso_date)
            grdWkdB4[r, 4].Text = hres!time_on
            grdWkdB4[r, 5].Text = hres!qsl_rcvd
            grdWkdB4[r, 6].Text = hres!qsl_sent
            hres.MoveNext
            Inc r
        Loop
        'descDB()
    Endif
Catch
    Message.Error(("Error in wkdB4\n") & Error.Text & "\n" & Error.Where)

End

Private Sub prepareWkdB4()

    grdWkdB4.Columns.Count = 7
    grdWkdB4.Columns[0].Text = ("QSO Nr")
    grdWkdB4.Columns[1].Text = ("Callsign")
    grdWkdB4.Columns[2].Text = ("Band")
    grdWkdB4.Columns[3].Text = ("Date")
    grdWkdB4.Columns[4].Text = ("Time")
    grdWkdB4.Columns[5].Text = ("QSL(R)")
    grdWkdB4.Columns[6].Text = ("QSL(S)")

End

Public Sub txtClx_GotFocus()

    btnOK.Default = False

End

Public Sub txtClx_LostFocus()

    btnOK.Default = True

End

Public Sub qrzcom_QRZOk()

    If modificando Then
        txtDataQRZ.Foreground = Color.DarkRed
        txtDataQRZ.Background = Color.LightBackground
        txtDataQRZ.Text = qrzcom.qcall & "\n" & qrzcom.fname & " " & qrzcom.name & "\n" &
            "" & qrzcom.addr1 & "\n" & qrzcom.addr2 & "\n" & qrzcom.country & "\nLoc: " & qrzcom.grid
    Else
        txtDataQRZ.Foreground = Color.Black
        txtDataQRZ.Background = Color.White
        lblErrorqrz.Text = qrzcom.qerror
        txtNameQSO.Text = Left(qrzcom.fname, InStr(qrzcom.fname, Chr(32)))
        ' check former Locator in DB
        If global.chkLoc(qrzcom.grid) = True Then
            txtLocQSO.Text = qrzcom.grid
        Else
            txtLocQSO.Text = getPrevLoc(txtCall.Text)
        Endif
        If Len(qrzcom.qslmgr) < 10 Then
            txtMgrQSO.Text = qrzcom.qslmgr
        Endif
        lblEmail.Text = qrzcom.email
        txtDataQRZ.Text = qrzcom.qcall & "\n" & qrzcom.fname & " " & qrzcom.name & "\n" &
            qrzcom.addr1 & "\n" & qrzcom.addr2 & "\n" & qrzcom.country
    Endif
    qrzcom.clearQRZ
    btnShwqrz.Enabled = True

End

Public Sub hamqth_HQTHOk()

    If modificando Then
        txtDataQRZ.Foreground = Color.DarkRed
        txtDataQRZ.Background = Color.LightBackground
        txtDataQRZ.Text = hamqth.qcall & "\n" & hamqth.fname & " " & hamqth.name & "\n" &
            hamqth.addr1 & "\n" & hamqth.addr2 & "\n" & hamqth.country & IIf(hamqth.grid, "\nLoc: " & hamqth.grid, "")
    Else
        txtDataQRZ.Foreground = Color.Black
        txtDataQRZ.Background = Color.White
        lblErrorqrz.Text = hamqth.qerror
        txtNameQSO.Text = Left(hamqth.fname, InStr(hamqth.fname, Chr(32)))
        ' check former Locator in DB
        If global.chkLoc(hamqth.grid) = True Then
            txtLocQSO.Text = hamqth.grid
        Else
            txtLocQSO.Text = getPrevLoc(txtCall.Text)
        Endif
        If Len(hamqth.qslmgr) < 10 Then
            txtMgrQSO.Text = hamqth.qslmgr
        Endif
        lblEmail.Text = hamqth.email
        txtDataQRZ.Text = hamqth.qcall & "\n" & hamqth.fname & " " & hamqth.name & "\n" &
            hamqth.addr1 & "\n" & hamqth.addr2 & "\n" & hamqth.country & IIf(hamqth.grid, "\nLoc: " & hamqth.grid, "")
    Endif
    hamqth.clear
    btnShwqrz.Enabled = True

End

Public Function getPrevLoc(call As String) As String

    Dim hres As Result
    Dim sql As String
    Dim r As Integer

    If call Then
        If connDB() Then Return
        sql = "SELECT gridsquare FROM log WHERE call = &1 ORDER BY Id DESC LIMIT 1;"
        hres = dbLog.cnLog.Exec(sql, call)
        If hres.Available Then Return hres!gridsquare
    Endif
Catch
    Message.Error(("Error in getPrevLoc\n") & Error.Text & "\n" & Error.Where)

End

Public Sub btnOK_Click()

    If txtCall.Text And txtRSTe.Text And txtRSTr.Text And txtFreq.Text Then
        ' [GB2:FCOL] IF txtLocQSO.ForeColor = Color.Red THEN
        If txtLocQSO.Foreground = Color.Red Then
            Message.Warning(("Incorrect Locator!"))
            Return
        Endif

        If modificando = True Then
            logModifiedQSO(CInt(lblNoQSO.Text))
            ' [GB2:FCOL] btnOK.ForeColor = Color.Black
            btnOK.Foreground = Color.Black
            btnOK.Text = ("OK [Enter]")
            frameQSO.Text = ("QSO")
            chkAutoSpot.Visible = True
            chkRT.Value = True
            chkRT.Visible = True
        Else
            logQSO()
            If chkAutoSpot.Value = True And sktCluster.Status = Net.Connected Then
                spotQSO()
            Else If chkAutoSpot.Value <> True And chkAutoSpot.Value <> False And sktCluster.Status = Net.Connected
                If Message.Question(("Do you want to spot\n") & txtCall.Text & ("\n to the Cluster Net?"), ("No"), ("Yes")) = 2 Then spotQSO()
            Endif
        Endif

        clearFields()
        txtCall.Clear()
        Try fldigiClearfiedls()
        modificando = False
        update_stats()
    Else
        Message.Info(("You must fill at least: Callsign, RST_r, RST_s and Frequency"))
        Return
    End If
    txtCall.SetFocus
    global.$iQSOn.Clear
    txtDataQRZ.Foreground = Color.Black
    txtDataQRZ.Background = Color.White
Catch
    Message.Error(("Error in btnOK_Click\n") & Error.Text & "\n" & Error.Where)

End

Private Sub spotQSO()
    'envia spot formateado al cluster según si es HF o V-UHF

    Dim strSpot As String = ""

    Select Case cboFreq.Text
        Case "6M", "4M", "2M", "70CM", "23CM", "13CM", "6CM", "3CM", "1.25CM", "6MM"
            strSpot = "DX " & txtFreq.Text & " " & txtCall.Text & " " & txtLocQSO.Text & Chr(060) & cboPropa.Text & Chr(062) & ini["Estacion/Locator"] & " " & txtComment.Text
        Case Else
            strSpot = "DX " & txtFreq.Text & " " & txtCall.Text & " " & txtComment.Text
    End Select

    If sktCluster.Status = Net.Connected Then
        Write #sktCluster, strSpot & "\r\n", Len(strSpot) + 2
    Endif

Catch
    Message.Error(("Error in spotQSO\n") & Error.Text & "\n" & Error.Where)

End

Public Sub btnClear_Click()

    If modificando Then
        ' [GB2:FCOL] btnOK.ForeColor = Color.Black
        btnOK.Foreground = Color.Black
        btnOK.Text = ("OK [Enter]")
        frameQSO.Text = ("QSO")
        chkAutoSpot.Visible = True
        chkRT.Value = True
        chkRT.Visible = True
    Endif
    modificando = False
    global.$iQSOn.Clear
    txtCall.Clear()
    clearFields()
    Try fldigiClearfiedls()
    fillData()
    txtCall.SetFocus
    txtDataQRZ.Foreground = Color.Black
    txtDataQRZ.Background = Color.White

End

Public Sub clearFields()

    txtLocQSO.Clear()
    txtNameQSO.Clear()
    If modificando Then txtFreq.Clear()
    txtQTHqso.Clear()
    txtRSTe.Clear()
    txtRSTr.Clear()
    txtComment.Clear()
    txtMgrQSO.Clear()
    txtDataQRZ.Clear()
    lblErrorqrz.Text = Null
    lblEmail.Clear()
    lblEmail.ToolTip = Null
    cboEntidad.Text = ""
    lblCont.Caption = ""
    lblPfx.Caption = ""
    lblCQ.Caption = ""
    lblITU.Caption = ""
    lblDist.Caption = ""
    lblRumbo.Caption = ""
    lblWorked.Caption = ""
    lblSqWorked.Caption = ""
    chkQSLe.Value = False
    chkQSLr.Value = False
    txtTPEA.Clear()
    txtIOTA.Clear()
    txtState.Clear()
    txtCounty.Clear()
    txtFreq2.Clear()
    statsEntity.Caption = ""
    tabLC[2].Visible = False

End

'******************************XPLANET********************************
Public Sub btnMap_Click()

    If ini["Xplanet/Activado"] = True And FMap.xplanet_opened = False Then
        Inc Application.Busy
        'p = EXEC ["xplanet", "-window", "-config", "dfh", "-origin", "sun", "-window_title", "DX Map", "-geometry", "600x600+410+10", "-fov", "1", "-latitude", "40", "-longitude", "-3", "-wait", "2"]
        p = Exec ["xplanet", "-window", "-config", "dfh", "-origin", "earth", "-dynamic_origin", "do", "-window_title", "DX Map", "-fov", "1", "-wait", "2"]
        FMap.Show
    Endif

End

Public Sub mnuDXMap_Click()

    btnMap_Click()

End

Public Sub mnuSquares_Click()

    If global.MapLoc = False Then
        Inc Application.Busy
        FLoc.Show()
        Dec Application.Busy
    Endif

End

Public Sub btnSqrMap_Click()

    mnuSquares_Click()

End

'*****************************HAMLIB************************************

Public Sub btnCAT_Click()
    'need to install portmap to get it to work

    If ini["Hamlib/Activado"] = True Then
        If btnCAT.Value = True Then
            Inc Application.Busy
            If FMain.ini["CAT/Debug"] = True Then FCatDebug.Show
            timerCAT.Delay = CInt(ini["Hamlib/Polling", 300])
            If FMain.ini["Hamlib/RPC"] = True Then
                If global.pidOf("rpc.rigd") = Null Then
                    Shell "rpc.rigd -m " & ini["Hamlib/Rig", 1] & " -r " & ini["Hamlib/Device", "/dev/ttyS0"] & " -s " & ini["Hamlib/Speed", 9600] & " &"
                    Wait 0.5
                Endif
                Shell "rigctld -m 1901 -r localhost &"
                If ini["Hamlib/Grig"] = True Then Shell "grig -m 1901 -p -P -r localhost"
            Else
                Shell "rigctld -m " & ini["Hamlib/Rig", 1] & " -r " & ini["Hamlib/Device", "/dev/ttyS0"] & " -s " & ini["Hamlib/Speed", 9600] & " &"
            Endif
            ' PanelSmeter.Visible = TRUE
            lcdQRG.Visible = True
            Wait 0.5

            connectHamlib()
            Dec Application.Busy
        Else
            timerCAT.Enabled = False
            sktHamlib.Close()
            $hamlibconnected = False
            lcdQRG.Text = 0
            ' pbSmeter.Value = 0
            ' PanelSmeter.Visible = FALSE
            lcdQRG.Visible = False
            Shell "killall grig rigctld rpc.rigd"
        Endif
    Endif

Catch
    Message.Error(("Error in btnCAT_Click\n") & Error.Text & "\n" & Error.Where)

End

Public Sub activateBtnCat(t As Boolean)

    If t = True Then
        btnCAT.Enabled = True
    Else
        btnCAT.Enabled = False
    Endif

End

Public Sub connectHamlib()
    'sktHamlib.Host = "localhost"

    If sktHamlib.Status <> Net.Connected Then
        Wait 1
        Try sktHamlib.Connect("localhost", 4532)
    Endif

End

Public Sub timerCAT_Timer()

    Dim s As String

    s = "fm\n"
    's = "fml STRENGTH\n"
    If sktHamlib.Status = Net.Connected Then
        Try Write #sktHamlib, s, Len(s)
    Endif

End

Public Sub sktHamlib_Read()

    Dim S As String
    Dim smeter As Integer
    Dim qrg As Float

    'IF sktHamlib.Status = Net.Connected THEN
    Line Input #sktHamlib, S
    'DEBUG S
    FCatDebug.setText(S)
    'IF S <> "END" THEN
    'DEBUG S

    If Len(S) > 6 Then
        qrg = Val(S) / 1000
        FBandMap.Control(qrg)
        Try lcdQRG.text = Replace(Format$(qrg, "#.00"), ",", ".")
        If modificando = False Then Try cboFreq.Text = global.getBand(qrg)
        'DEBUG "qrg=" & qrg
    Else If Len(S) <= 4 Then
        If S = "USB" Or S = "LSB" Or S = "AM" Or S = "FM" Or S = "CW" Or S = "CW" Or S = "FMN" Or S = "FSK" Or S = "AMN" Or S = "RTTY"
            $mode = S
            txtModeChange.Text = $mode
        Endif
        ' ELSE IF Val(S) < 61 THEN
        '     smeter = 54 + Val(S)
        '     'DEBUG "smeter=" & smeter
        '     TRY pbSmeter.Value = smeter / 114
        '                 ENDIF
    Endif
    'ENDIF

    'ENDIF

Catch
    Debug Error.Text, Error.Where
    ' timerCAT.Enabled = FALSE
    ' sktHamlib.Close()
    ' btnCAT.Value = FALSE

End

Public Sub sktHamlib_Ready()

    If sktHamlib.Status = Net.Connected Then
        $hamlibconnected = True
        timerCAT.Enabled = True
    Endif
    'TRY WRITE #sktHamlib, "VFO VFOA\r\n", 10

End

Public Sub setModeBand(sfreq As Float)

    Dim S As String

    sfreq *= 1000
    'getMode(sfreq)
    If sktHamlib.Status = Net.Connected Then
        S = "F " & CStr(sfreq) & "\r\n"
        Try Write #sktHamlib, S, Len(S)
    Endif
    cboFreq.Text = global.getBand(sfreq / 1000)

Catch
    Message.Error(("Error in setModeBand\n") & Error.Text & "\n" & Error.Where)

End

Public Sub lcdQRG_MouseWheel()

    Dim frq As Float = CFloat(lcdQRG.Text)
    Dim S As String

    If Mouse.Delta > 0 Then
        If sktHamlib.Status = Net.Connected Then
            S = "F " & CStr((frq * 1000) + 1000) & "\r\n"
            Write #sktHamlib, S, Len(S)
        Endif
    Else
        If sktHamlib.Status = Net.Connected Then
            S = "F " & CStr((frq * 1000) - 1000) & "\r\n"
            Write #sktHamlib, S, Len(S)
        Endif
    Endif

End

'***********************CLUSTER******************************

Public Sub btnConn_Click()
    'conectar al cluster

    Dim sServer As String[]
    Dim sHost, sPort As String
    Dim S As String = ini["Telnet/Server"]

    If S Then
        tabLC.Index = 1
        sServer = Split(S, ":")
        sHost = sServer[0]
        sPort = sServer[1]
        If btnConn.Value = True Then
            Try sktCluster.Close()
            If sktCluster.Status <> Net.Connected Then
                sktCluster.Host = sHost
                sktCluster.Port = sPort
                Wait 0.1
                Try sktCluster.Connect()
            Endif
        Else
            If sktCluster.Status = Net.Connected Then
                sktCluster.Close()
            Endif
        Endif
    Else
        Stop Event
        btnConn.Value = False
        Message.Info(("Not yet configured any Cluster server in your settings."))
    Endif

Catch
    Message.Error(("Error in btnConn_Click\n") & Error.Text & "\n" & Error.Where)

End

Public Sub sktCluster_Ready()

    Dim F As File
    Dim S, fic As String

    fic = User.Home &/ ".xplanet/markers/dx"
    F = Open fic For Write Create
    Close #F
    txtClx.SetFocus()

End

Public Sub sktCluster_Read()

    If sktCluster.Status = Net.Connected Then
        Line Input #sktCluster, L
        If ini["Telnet/Autologin"] = True Then
            If InStr(L, "login:") > 0 Then Write #sktCluster, strippedCall() & "\r\n", Len(strippedCall()) + 2
        Endif
        filterLine(L)
    Endif

End

Private Function strippedCall() As String

    Dim call As String = ini["Estacion/QRZ"]
    Dim stripped As String = ""
    Dim arr As String[]

    If InStr(call, "/") > 1 Then
        arr = Split(call, "/")
        If Len(arr[0]) > Len(arr[1]) Then
            stripped = arr[0]
        Else
            stripped = arr[1]
        Endif
    Else
        stripped = call
    Endif

    Return stripped

End

Public Sub filterLine(dxline As String)

    Dim HF As String = FMain.ini["Filtros/HF", True]
    Dim VHF As String = FMain.ini["Filtros/VHF", True]
    Dim WARC As String = FMain.ini["Filtros/WARC", True]
    Dim ANN As String = FMain.ini["Filtros/ANN", True]
    Dim WWV As String = FMain.ini["Filtros/WWV", True]
    Dim WCY As String = FMain.ini["Filtros/WCY", True]
    Dim band As String
    Dim freq As Float

    Select Case Left(dxline, 5)
        Case "DX de"
            freq = CFloat(Trim(Mid(dxline, 15, 10)))
            band = global.getBand(freq)
            Select Case band
                Case "2190M", "160M", "80M", "40M", "20M", "15M", "10M"                         'HF bands
                    If HF = True Then addLines(dxline, 1)
                Case "6M", "4M", "2M", "70CM", "23CM", "13CM", "6CM", "3CM", "1.25CM", "6MM"    'V-UHF bands
                    global.processMapSpots(dxline) 'always send map spots to database
                    If VHF = True Then addLines(dxline, 1)
                Case "30M", "17M", "12M"                                                        'WARC bands
                    If WARC = True Then addLines(dxline, 1)
                Case Null
                    addLines(dxline, 0)
            End Select
        Case "To AL"
            If ANN = True Then addLines(dxline, 2)
        Case "WWV d"
            If WWV = True Then addLines(dxline, 3)
        Case "WCY d"
            If WCY = True Then addLines(dxline, 4)
        Case Else
            If IsDigit(Trim(Left(dxline, 6))) = True And InStr(dxline, ".") > 6 And InStr(dxline, ".") < 15 Then
                addLines(dxline, 5)
            Else
                addLines(dxline, 0)
            Endif
    End Select

End

Public Sub addLines(linea As String, Optional tipo As Integer = 0)   'añade linea según tipo: 0=default, 1=DX, 2=ANN, 3=WWV, 4=WCY, 5=sh/dx
    ' add filtered lines to gridview

    Dim DX, band As String
    Dim freq As Float

    tblCluster.Rows.Count = I + 1
    Select Case tipo
        Case 0
            tblCluster[I, 0].Text = linea
            tblCluster[I, 0].ForeColor = ini["Colores/Default", 0]
        Case 1
            DX = Trim(Mid(linea, 27, 10))
            freq = CFloat(Trim(Mid(linea, 15, 10)))
            band = global.getBand(freq)
            '-------------------------------bandmap
            $cbm = New CDXBM
            $cbm.dxCall = DX
            $cbm.dxFreq = freq
            $cbm.dxColor = global.clusterColor(DX, band)
            global.$cSpot.Add($cbm)
            If global.$cSpot.Count > 1000 Then Try global.$cSpot.Remove(0)
            FBandMap.daRefresh
            '-------------------------------bandmap
            If Right(linea, 1) = Chr(7) Then
                linea = Replace(linea, Chr(7), "*")
                Try snd.Play()
            Endif
            tblCluster[I, 0].ForeColor = $cbm.dxColor 'global.clusterColor(DX, band)
            tblCluster[I, 0].Text = linea
            markers_spot(linea)
            'notify DX on trayicon
            If Me.Minimized = True Then
                Exec ["notify-send", "--urgency=normal", "--icon=" & User.Home &/ ".config/dfhlog/dfhlog.png", "DX", linea]
            Endif
        Case 2, 3, 4
            tblCluster[I, 0].RichText = "<i><font color=\"#C0C0C0\">" & linea & "</font></i>"
            'tblCluster[I, 0].ForeColor = ini["Colores/Default", 0]
        Case 5
            DX = Trim(Mid(linea, 11, 12))
            freq = CFloat(Trim(Left(linea, 10)))
            band = global.getBand(freq)
            tblCluster[I, 0].Text = linea
            tblCluster[I, 0].ForeColor = global.clusterColor(DX, band)
    End Select

    tblCluster.Rows.Select(I)
    tblCluster.Rows.Unselect()
    If $markedSpot = False Then tblCluster[I, 0].EnsureVisible() 'let the user select if stop scrolling
    Inc I

Catch
    'Message.Error(("Error in addLines\n") & Error.Text & "\n" & Error.Where)
    Debug Error.Text, Error.Where

End

Public Sub markers_spot(dx As String)

    Dim dxcall, lat, lon, arch As String
    Dim F As File

    arch = User.Home &/ ".xplanet/markers/dx"
    dxCall = Trim(Mid(dx, 27, 10))
    'buscar lat lon y escribir markers "dx"
    cdx = world.findEntity(dxcall)
    Try lat = cdx.lat
    Try lon = cdx.lon
    If lat And lon Then
        'S = lat & " " & CStr(lon) & " \"" & dxcall & "\""
        F = Open arch For Output Append
        Print #F, Format(lat, "-00#.#0"), Format(lon, "-00#.#0"), "\"" & dxcall & "\""
        Close #F
    Endif

Catch
    Message.Error(("Error in markersSpot\n") & Error.Text & "\n" & Error.Where)

End

Public Sub sktCluster_Closed()

    btnConn.Value = False
    tblCluster.Rows.Count = 0

End

Public Sub btnSendClx_Click()

    If sktCluster.Status = Net.Connected Then
        Write #sktCluster, txtClx.Text & "\r\n", Len(txtClx.Text) + 2
    Endif
    txtClx.Clear()

End

Public Sub btnClearClx_Click()

    txtClx.Clear()

End

Public Sub txtClx_KeyPress()

    If Key.Code = Key.Return Then
        btnSendClx_Click()
    Endif

End

Public Sub tblCluster_Click()

    Dim dxline As String

    If tblCluster.Rows.Count > 1 Then
        dxline = tblCluster[tblCluster.Row, 0].Text
        If Left$(dxline, 5) = "DX de" Or (IsDigit(Trim(Left(dxline, 6))) = True And InStr(dxline, ".") > 6 And InStr(dxline, ".") < 15) Then
            If $markedSpot = False
                tblCluster.Current.Background = Color.Yellow
                $markedSpot = True
                $i = tblCluster.Row
            Else
                If tblCluster.Row = $i Then
                    tblCluster.Current.Background = Color.White
                    $markedSpot = False
                Endif
            Endif
        Endif
    Endif
Catch
    Message.Error(("Error in tblCluster_Click()\n") & Error.Text & "\n" & Error.Where)

End

Public Sub tblCluster_Activate()

    Dim dxCall As String
    Dim dxFreq As Float
    Dim dxline, dxcomment, pa, pb, homecall As String

    stopped = False
    If tblCluster.Rows.Count > 0 Then
        'dxline = tblCluster.Current.Text
        dxline = tblCluster[tblCluster.Row, 0].Text
        If Left$(dxline, 5) = "DX de" Then
            dxFreq = CFloat(Trim(Mid(dxline, 15, 10)))
            dxCall = Trim(Mid(dxline, 27, 10))
            dxcomment = Trim(Mid(dxline, 40, 29))
        Endif
        If IsDigit(Trim(Left(dxline, 6))) = True And InStr(dxline, ".") > 6 And InStr(dxline, ".") < 15 Then
            dxCall = Trim(Mid(dxline, 11, 12))
            dxFreq = CFloat(Trim(Left(dxline, 10)))
            dxcomment = Trim(Mid(dxline, 42, 28))
        Endif
        clearFields()
        vHora.Value = Format(global.UTCNow(), "hh:nn:ss") 'reset counter
        txtCall.Text = dxCall

        If ini["Estacion/SetComment", False] = True Then txtComment.Text = dxcomment
        setModeBand(dxFreq)

        txtFreq.Text = Replace(CStr(dxFreq), ",", ".")
        If modificando = False Then txtCall_LostFocus() 'qrzcom.getQRZcom(homecall) 'search in qrz.com

    Endif

    btnOK.SetFocus()

Catch
    Debug ("Error in tblCluster_Activate\n"), Error.Text, Error.Where

End

'**************************Manejo de algunos controles**********************
Public Sub chkQSLr_Click()

    If dteQSLr.Enabled = False Then
        dteQSLr.Enabled = True
        dteQSLr.Value = global.UTCNow()
    Else
        dteQSLr.Enabled = False
        dteQSLr.Clear()
    Endif

End

Public Sub chkQSLe_Click()

    If dteQSLe.Enabled = False Then
        dteQSLe.Enabled = True
        dteQSLe.Value = global.UTCNow()
    Else
        dteQSLe.Enabled = False
        dteQSLe.Clear()
    Endif

End

Public Sub txtRSTr_KeyPress()

    Select Case Key.Code
        Case 49 To 57
        Case 79
        Case 111
        Case Key.BackSpace
        Case Key.Delete
        Case Key.Tab
        Case Else
            Stop Event
    End Select

End

Public Sub txtRSTe_KeyPress()

    Select Case Key.Code
        Case 49 To 57
        Case 79
        Case 111
        Case Key.BackSpace
        Case Key.Delete
        Case Key.Tab
        Case Else
            Stop Event
    End Select

End

Public Sub txtRSTr_Change()

    txtRSTr.Text = Upper(txtRSTr.Text)

End

Public Sub txtRSTe_Change()

    txtRSTe.Text = Upper(txtRSTe.Text)

End

Public Sub lcdQRG_Change()

    If sktHamlib.Status = Net.Connected And modificando = False Then txtFreq.Text = Replace(Left(lcdQRG.Text, Len(lcdQRG.Text) - 1), ",", ".")

End

Public Sub txtMgrQSO_Change()

    txtMgrQSO.Text = Upper(txtMgrQSO.Text)

End

Public Sub txtLocQSO_Change()

    txtLocQSO.Text = Upper(txtLocQSO.Text)
    If txtLocQSO.Text Then
        If global.chkLoc(txtLocQSO.Text) Then
            ' [GB2:FCOL] txtLocQSO.ForeColor = Color.Black
            txtLocQSO.Foreground = Color.Black
            lblDist.Caption = Round(global.distLoc(txtLocQSO.Text, ini["Estacion/Locator"]), -1) & (" Km")
            lblRumbo.Caption = Round(global.bearingLoc(ini["Estacion/Locator"], txtLocQSO.Text), -1) & (" Deg")
            'IF modificando = FALSE THEN
            getSqWkdCfd(txtLocQSO.Text, cboFreq.Text)
        Else
            ' [GB2:FCOL] txtLocQSO.ForeColor = Color.Red
            txtLocQSO.Foreground = Color.Red
            lblSqWorked.Text = ""
            If modificando = False Then getWkdCfd(c.entity, cboFreq.Text)
        Endif
    Else
        ' [GB2:FCOL] txtLocQSO.ForeColor = Color.Black
        txtLocQSO.Foreground = Color.Black
    Endif

End

Public Sub cboVia_Click()

    If cboVia.Index = 1 Then
        txtMgrQSO.Enabled = True
    Else
        txtMgrQSO.Enabled = False
    Endif

End

Public Sub acerca_Click()

    Dim f As Form

    f = New FAbout
    f.ShowModal

End

Public Sub conectar_Click()

    btnConn_Click()
    btnConn.Value = True

End

Public Sub desconectar_Click()

    btnConn_Click()
    btnConn.Value = False

End

Public Sub lblEmail_MouseUp()

    If lblEmail.Text Then
        Try Desktop.Open("mailto:" & Trim(lblEmail.Text))
    Endif

End

Public Sub lblEmail_Enter()

    If lblEmail.Text Then
        lblEmail.ToolTip = lblEmail.Text
    Endif

End

Public Sub chkAutoSpot_Click()

    If chkAutoSpot.Value = True Then
        ' [GB2:BCOL] chkAutoSpot.BackColor = Color.Red
        chkAutoSpot.Background = Color.Red
        ' [GB2:FCOL] chkAutoSpot.ForeColor = Color.Blue
        chkAutoSpot.Foreground = Color.Blue
    Else If chkAutoSpot.Value <> True And chkAutoSpot.Value <> False
        ' [GB2:BCOL] chkAutoSpot.BackColor = Color.Orange
        chkAutoSpot.Background = Color.Orange
        ' [GB2:FCOL] chkAutoSpot.ForeColor = Color.Black
        chkAutoSpot.Foreground = Color.Black
    Else
        ' [GB2:BCOL] chkAutoSpot.BackColor = Color.Transparent
        chkAutoSpot.Background = Color.Transparent
        ' [GB2:FCOL] chkAutoSpot.ForeColor = Color.Black
        chkAutoSpot.Foreground = Color.Black
    Endif

End

Private Function format_txt(sStr As String) As String

    Dim f As Float = CFloat(sStr)

    Return Replace(Format(f, "#.0"), ",", ".")

End

Public Sub txtFreq_KeyPress()

    Select Case Key.Code
        Case 48 To 57
        Case 46
        Case Key.BackSpace
        Case Key.Delete
        Case Key.Tab
        Case Else
            Stop Event
    End Select

End

Public Sub txtFreq2_KeyPress()

    txtFreq_KeyPress()

End

Public Sub txtFreq_LostFocus()

    Dim S As String
    Dim Fq As Integer
    Dim spl As String[]

    If txtFreq.Text Then
        spl = Split(txtFreq.Text, ".")
        If spl.Count > 2 Then
            Message.Warning(("Not more than 1 decimal point allowed!"))
            txtFreq.SetFocus()
            txtFreq.Select(0, Len(txtFreq.Text))
        Else
            txtFreq.Text = Replace(txtFreq.Text, ",", ".")
            If global.getBand(CFloat(txtFreq.Text)) Then
                Fq = CFloat(txtFreq.Text) * 1000
                cboFreq.Text = global.getBand(CFloat(txtFreq.Text))
                txtFreq.Text = format_txt(txtFreq.Text)
                txtFreq2.Text = txtFreq.Text
                txtFreq2.Select(0, Len(txtFreq2.Text))
                If sktHamlib.Status = Net.Connected Then 'cambiar freq CAT si esta conn
                    S = "F " & CStr(Fq) & "\r\n"
                    Try Write #sktHamlib, S, Len(S)
                Endif
            Else
                Message.Warning(("Not valid TX Freq!"))
                txtFreq.SetFocus()
            Endif
        Endif
    Endif

End

Public Sub txtFreq2_LostFocus()

    Dim spl As String[]

    If txtFreq2.Text Then
        spl = Split(txtFreq2.Text, ".")
        If spl.Count > 2 Then
            Message.Warning(("Not more than 1 decimal point allowed!"))
            txtFreq2.SetFocus()
            txtFreq2.Select(0, Len(txtFreq2.Text))
        Else
            txtFreq2.Text = Replace(txtFreq2.Text, ",", ".")
            If global.getBand(CFloat(txtFreq2.Text)) Then
                txtFreq2.Text = format_txt(txtFreq2.Text)
            Else
                Message.Warning(("Not valid RX Freq!"))
                txtFreq2.SetFocus()
            Endif
        Endif
    Endif

End
'********************************DATABASE************************************

Public Sub nuevo_Click()

    Dialog.Title = ("Create new log")
    Dialog.Filter = ["*.db", ("dfhLog Database")]
    If Dialog.SaveFile() Then
        ini["Log/File"] = ""
        Message.Warning(("Path to database not found, please open or create a new one"))
    Else
        Copy "data/nuevoLog.db" To Dialog.Path & ".db"
        ini["Log/File"] = Dialog.Path & ".db"
        ini.Save()
        lblPath.Text = "Log: " & ini["Log/File"]
        dbLog.CloseDB
        dbLog.connDB(ini["Log/File"])
        fillData()
        'cargar datos log
    Endif

Catch
    Message.Error(("Error creating new Log\n") & Error.Text & "\n" & Error.Where)

End

Public Sub btnNewLog_Click()

    nuevo_Click()

End

Public Sub mnuOpnLog_Click()

    Dialog.Title = ("Open log")
    Dialog.Filter = ["*.db", ("dfhLog Database"), "*", ("All Files")]
    Dialog.Path = User.Home
    If Dialog.OpenFile() Then
        Return ' User pressed Cancel -
    Endif
    'cargar db y mostrar ruta en statusbar
    ini["Log/File"] = Dialog.Path
    ini.Save()
    lblPath.Text = "Log: " & ini["Log/File"]
    dbLog.CloseDB()
    dbLog.connDB(ini["Log/File"])
    fillData() 'cargar datos log

Catch
    Message.Error(("Error opening Log\n") & Error.Text & "\n" & Error.Where)

End

Public Sub btnOpnLog_Click()

    mnuOpnLog_Click()

End

Private Sub prepararGrid()

    grdQSO.Columns.Count = 23
    grdQSO.Columns[0].Text = ("Nr")
    grdQSO.Columns[1].Text = ("Date")
    grdQSO.Columns[2].Text = ("Time")
    grdQSO.Columns[3].Text = ("Callsign")
    grdQSO.Columns[4].Text = ("Band")
    grdQSO.Columns[5].Text = ("Mode")
    grdQSO.Columns[6].Text = ("Propa.")
    grdQSO.Columns[7].Text = ("RST(R)")
    grdQSO.Columns[8].Text = ("RST(S)")
    grdQSO.Columns[9].Text = ("Name")
    grdQSO.Columns[10].Text = ("Locator")
    grdQSO.Columns[11].Text = ("QSL(S)")
    grdQSO.Columns[12].Text = ("QSL(R)")
    grdQSO.Columns[13].Text = ("QSL Via")
    grdQSO.Columns[14].Text = ("Prefix")
    grdQSO.Columns[15].Text = ("DXCC")
    grdQSO.Columns[16].Text = ("Cont.")
    grdQSO.Columns[17].Text = ("CQz")
    grdQSO.Columns[18].Text = ("ITUz")
    grdQSO.Columns[19].Text = ("Operator")
    grdQSO.Columns[20].Text = ("Power")
    grdQSO.Columns[21].Text = ("My Locator")
    grdQSO.Columns[22].Text = ("Satellite")
    'grdQSO.Settings = ini["GrdQSO/Settings"]

End

Public Sub fillData()

    Dim clave As String
    Dim hResul, hResulMax As Result

    grdQSO.Clear()

    If connDB() Then Return
    hResul = dbLog.cnLog.Exec("SELECT * FROM log ORDER by id DESC LIMIT 20")
    hResulMax = dbLog.cnLog.Exec("SELECT id FROM log")
    Do While hResul.Available
        clave = hResul["id"]
        grdQSO.Add(clave, clave)
        grdQSO[clave][1] = Format(hResul!qso_date, "dd/mm/yyyy") 'Day(hResul!qso_date) & "/" & Month(hResul!qso_date) & "/" & Year(hResul!qso_date)
        grdQSO[clave][2] = Left(hResul!time_on, 5)
        grdQSO[clave][3] = hResul!call
        grdQSO[clave][4] = hResul!band
        grdQSO[clave][5] = hResul!mode
        grdQSO[clave][6] = hResul!prop_mode
        grdQSO[clave][7] = hResul!rst_rcvd
        grdQSO[clave][8] = hResul!rst_sent
        grdQSO[clave][9] = hResul!name
        grdQSO[clave][10] = hResul!gridsquare
        grdQSO[clave][11] = hResul!qsl_sent
        grdQSO[clave][12] = hResul!qsl_rcvd
        grdQSO[clave][13] = hResul!qsl_via
        grdQSO[clave][14] = hResul!pfx
        grdQSO[clave][15] = hResul!country
        grdQSO[clave][16] = hResul!cont
        grdQSO[clave][17] = hResul!cqz
        grdQSO[clave][18] = hResul!ituz
        grdQSO[clave][19] = hResul!operator
        grdQSO[clave][20] = hResul!tx_pwr
        grdQSO[clave][21] = hResul!my_gridsquare
        grdQSO[clave][22] = hResul!sat_name
        hResul.MoveNext()
    Loop

    lblNoQSO.Text = hResulMax.Count + 1

    grdQSO.Refresh()

Catch
    Message.Error(("Error in fillData\n") & Error.Text & "\n" & Error.Where)

End

Private Function QSLrec() As String

    Dim s As String = ""

    If chkQSLr.Value = True Then
        s = "Y"
    Else
        s = "N"
    Endif
    Return s

End

Private Function QSLsent() As String

    Dim s As String = ""

    If chkQSLe.Value = True Then
        s = "Y"
    Else
        s = "N"
    Endif
    Return s

End

Private Function parseFreq(qrg As String) As String

    If qrg Then
        qrg = Round(CFloat(qrg) / 1000, -3)
        qrg = Replace(CStr(qrg), ",", ".")
    Else
        qrg = ""
    Endif

    Return qrg

End

Private Sub logQSO()

    Dim sql As String
    Dim modo As String = cboModo.Text
    Dim dist As Float = CFloat(Replace(lblDist.Text, ",", "."))

    If cboModo.Text = "LSB" Or cboModo.Text = "USB" Then modo = "SSB"

    If connDB() Then Return '
    sql = "INSERT INTO log VALUES (&1,&2,&3,&4,&5,&6,&7,&8,&9,&10,&11,&12,&13,&14,&15,&16,&17,&18," &
        "&19,&20,&21,&22,&23,&24,&25,&26,&27,&28,&29,&30,&31,&32,&33,&34,&35,&36,&37,&38);"

    dbLog.cnLog.Exec(sql, "", vFecha.Value, vHora.Text, vHora2.Text, txtCall.Text, parseFreq(txtFreq.Text),
        parseFreq(txtFreq2.Text), cboFreq.Text, modo, cboPropa.Text, txtRSTr.Text, txtRSTe.Text, txtNameQSO.Text,
        txtLocQSO.Text, txtQTHqso.Text, txtComment.Text, QSLsent(), QSLrec(), dteQSLe.Value, dteQSLr.Value,
        txtMgrQSO.Text, c.pfx, c.continent, c.cqz, c.ituz, txtState.Text, txtCounty.Text, txtIOTA.Text,
        ini["Estacion/QRZ"], txtPwr.Text, ini["Estacion/Locator"], txtSatName.Text, txtSatMode.Text,
        lblEmail.Text, c.entity, c.number, txtTPEA.Text, dist)
    fillData()

Catch
    Message.Error(("Error loging QSO\n") & Error.Text & "\n" & Error.Where)

End

Private Sub menuLog()

    global.$iQSOn.Clear
    global.$iQSOn.Add(CInt(grdQSO[grdQSO.Current.Text][0]))
    $hmenuInfo.Text = (("For QSO with: ") & grdQSO[grdQSO.Current.Text][3])

    ' pop up
    $hMenu.Popup()

End

Public Sub grdQSO_Click()

    global.$iQSOn.Clear
    global.$iQSOn.Add(CInt(grdQSO[grdQSO.Current.Text][0]))

End

Public Sub mnuEditarQSO_Click()

    If global.$iQSOn.Count = 1 Then modifyQSO(grdQSO[grdQSO.Current.Text][0])
    'DEBUG grdQSO[grdQSO.Current.Text][0]

End

Public Sub mnuBorrarQSO_Click()

    Dim qso As String

    qso = grdQSO.Current.Text
    If Message.Warning(("Selected QSO will be deleted\nDo you want to continue?"), ("Delete QSO"), ("Cancel")) = 2 Then Return
    If connDB() Then Return
    dbLog.cnLog.Exec("DELETE FROM log WHERE id=" & qso & ";")
    fillData()
Catch
    Message.Error(("Error deleting QSO\n") & Error.Text)

End

Public Sub mnuQSLrec_Click()

    If global.$iQSOn.Count = 1 Then setQSLrcvd(global.$iQSOn)

End

Public Sub mnuQSLenv_Click()

    If global.$iQSOn.Count = 1 Then setQSLsent(global.$iQSOn)

End

Public Sub mnuQSLnotrec_Click()

    If global.$iQSOn.Count = 1 Then setQSLrcvd(global.$iQSOn, True)

End

Public Sub mnuQSLnotenv_Click()

    If global.$iQSOn.Count = 1 Then setQSLsent(global.$iQSOn, True)

End

Public Sub mnuPrintQSL_Click()

    If global.$iQSOn.Count = 1 Then Try global.addToQueue(global.$iQSOn[0])
    If Not Error Then Message.Info(("Added ") & global.$iAdded2Queue & (" QSOs to the QSL print queue."))
    global.$iAdded2Queue = 0

End

Public Sub grdQSO_Menu()

    Try menuLog()
    grdQSO.SelectAll(False)

End

Public Sub btnOpnTPEA_Click()
    'IF c.pfx = "EA" OR c.pfx = "EA6" OR c.pfx = "EA8" OR c.pfx = "EA9" THEN

    FAwards.oTPEA()
    txtTPEA.Text = sTPEA
    sTPEA = Null
    'ENDIF

End

Public Sub btnOpnIOTA_Click()

    FAwards.oIOTA()
    txtIOTA.Text = sIOTA
    sIOTA = Null

End

Public Sub btnOpnCounty_Click()

    FAwards.oUSAC()
    txtCounty.Text = sUSAC
    txtState.Text = sWAS
    sUSAC = Null

End

Public Sub btnOpnWAS_Click()

    FAwards.oWAS()
    txtState.Text = sWAS
    txtCounty.Text = Null
    sWAS = Null

End

Public Sub mnuAdifImp_Click()

    FiADIF.ShowModal()
    fillData()

End

Public Sub txtPwr_KeyPress()

    Select Case Key.Code
        Case 48 To 57
        Case Key.BackSpace
        Case Key.Delete
        Case Key.Tab
            'CASE Key.Return
        Case Else
            Stop Event
    End Select

End

Public Sub mnuBackup_Click()

    Dim s As String

    s = User.Home &/ "log" & Year(Now) & Format$(Month(Now), "0#") & Format$(Day(Now), "0#") & Format$(Hour(Now), "0#") & Format$(Minute(Now), "0#") & Format$(Second(Now), "0#") & ".db"
    Try Copy ini["Log/File"] To s
    Message.Info(("Copy saved as:\n") & s)

Catch
    Message.Error(("Error in BackupDB\n") & Error.Text & "\n" & Error.Where)

End

Public Sub mnuBDcompact_Click()

    FmtoBD.ShowModal()
    fillData()

End

Public Sub mnuRlog_Click()

    FLog.Show()

End

Public Sub mnuSearch_Click()

    If FSearch.active = False Then FSearch.Show()

End

Public Sub modifyQSO(idQSO As Integer)

    Dim sql As String
    Dim hresult As Result
    Dim banda As String

    modificando = True
    clearFields()
    btnOK.Text = ("Modify")
    ' [GB2:FCOL] btnOK.ForeColor = Color.Red
    btnOK.Foreground = Color.Red
    frameQSO.Text = ("Edit QSO")
    'chkAutoSpot.Value = FALSE
    chkAutoSpot.Visible = False
    chkRT.Value = False
    chkRT.Visible = False
    'cargar datos qso
    lblNoQSO.Text = idQSO
    sql = "SELECT * FROM log WHERE id = &1;"
    If connDB() Then Return
    hresult = dbLog.cnLog.Exec(sql, idQSO)
    If hresult.Available Then
        txtCall.Text = hresult!call
        vFecha.Value = hresult!qso_date
        vHora.Value = hresult!time_on
        If hresult!time_off Then vHora2.Value = hresult!time_off
        If hresult!freq Then txtFreq.Text = Replace(CStr(CFloat(hresult!freq) * 1000), ",", ".")
        If hresult!freq_rx Then txtFreq2.Text = Replace(CStr(CFloat(hresult!freq_rx) * 1000), ",", ".")
        cboModo.Text = hresult!mode
        cboFreq.Text = hresult!band
        cboPropa.Text = hresult!prop_mode
        txtRSTr.Text = hresult!rst_rcvd
        txtRSTe.Text = hresult!rst_sent
        txtNameQSO.Text = hresult!name
        txtLocQSO.Text = hresult!gridsquare
        txtQTHqso.Text = hresult!qth
        txtComment.Text = hresult!comment
        chkQSLe.Value = parseQSL(hresult!qsl_sent)
        chkQSLr.Value = parseQSL(hresult!qsl_rcvd)
        dteQSLe.Value = hresult!qslsdate
        dteQSLr.Value = hresult!qslrdate
        txtMgrQSO.Text = hresult!qsl_via
        txtState.Text = hresult!state
        txtCounty.Text = hresult!cnty
        txtIOTA.Text = hresult!iota
        txtPwr.Text = hresult!tx_pwr
        txtSatName.Text = hresult!sat_name
        txtSatMode.Text = hresult!sat_mode
        lblEmail.Text = hresult!email
        txtTPEA.Text = hresult!TPEA
        cboEntidad.Text = hresult!country
        txtCall_LostFocus

    Else
        Message.Error(("QSO Nr ") & idQSO & (" doesn't exist!"))
        btnClear_Click()
    Endif

Catch
    Message.Error(("Error in modifyQSO\n") & Error.Text & "\n" & Error.Where)

End

Private Function parseQSL(s As String) As Integer

    Dim n As Integer

    If s = "Y" Or s = "y" Then
        n = 1
    Else
        n = 0
    Endif

    Return n

End

Private Sub logModifiedQSO(id As Integer)

    Dim sql As String
    Dim modo As String = cboModo.Text

    If cboModo.Text = "LSB" Or cboModo.Text = "USB" Then modo = "SSB"
    If connDB() Then Return '
    sql = "UPDATE log SET qso_date=&1, time_on=&2, time_off=&3, call=&4, freq=&5, freq_rx=&6, band=&7, mode=&8, prop_mode=&9, " &
        "rst_rcvd=&10, rst_sent=&11, name=&12, gridsquare=&13, qth=&14, comment=&15, qsl_sent=&16, qsl_rcvd=&17, qslsdate=&18, qslrdate=&19, qsl_via=&20, " &
        "pfx=&21, cont=&22, cqz=&23, ituz=&24, state=&25, cnty=&26, iota=&27, operator=&28, tx_pwr=&29, my_gridsquare=&30," &
        "sat_name=&31, sat_mode=&32, email=&33, country=&34, dxcc=&35, TPEA=&36 WHERE id = " & id & ";"
    dbLog.cnLog.Exec(sql, vFecha.Value, vHora.Text, vHora2.Text, txtCall.Text, parseFreq(txtFreq.Text), parseFreq(txtFreq2.Text),
        cboFreq.Text, modo, cboPropa.Text, txtRSTr.Text, txtRSTe.Text, txtNameQSO.Text, txtLocQSO.Text, txtQTHqso.Text, txtComment.Text,
        QSLsent(), QSLrec(), dteQSLe.Value, dteQSLr.Value, txtMgrQSO.Text, lblPfx.Text, lblCont.Text, lblCQ.Text, lblITU.Text, txtState.Text,
        txtCounty.Text, txtIOTA.Text, ini["Estacion/QRZ"], txtPwr.Text, ini["Estacion/Locator"], txtSatName.Text, txtSatMode.Text,
        lblEmail.Text, cboEntidad.Text, cboEntidad.Index, txtTPEA.Text)

    fillData()
    If FLog.Visible = True Then FLog.fillData()

Catch
    Message.Error(("Error Modifying QSO\n") & Error.Text & "\n" & Error.Where)

End

Public Sub setQSLrcvd(id As Integer[], Optional unset As Boolean = False)

    Dim i As Integer
    Dim sql As String

    If connDB() Then Return
    For i = 0 To id.Count - 1
        If unset = True Then
            sql = "UPDATE log SET qsl_rcvd='N' WHERE id = " & id[i] & ";"
        Else
            sql = "UPDATE log SET qsl_rcvd='Y' WHERE id = " & id[i] & ";"
        Endif
        dbLog.cnLog.Exec(sql)
    Next

    fillData()
    If FLog.Visible = True Then FLog.fillData()
    If FSearch.Visible = True Then FSearch.fillData()
Catch

    Message.Error(("Error setting QSL Rcvd QSO\n") & Error.Text & "\n" & Error.Where)

End

Public Sub setQSLsent(id As Integer[], Optional unset As Boolean = False)

    Dim i As Integer
    Dim sql As String

    If connDB() Then Return
    For i = 0 To id.Count - 1
        If unset = True Then
            sql = "UPDATE log SET qsl_sent='N' WHERE id = " & id[i] & ";"
        Else
            sql = "UPDATE log SET qsl_sent='Y' WHERE id = " & id[i] & ";"
        Endif
        dbLog.cnLog.Exec(sql)
    Next

    fillData()
    If FLog.Visible = True Then FLog.fillData()
    If FSearch.Visible = True Then FSearch.fillData()
Catch
    Message.Error(("Error setting QSL Sent QSO\n") & Error.Text & "\n" & Error.Where)

End

Public Sub btnCalIni_Click()

    If vFecha.Enabled Then FCal.getDatePicker(btnCalIni, "fmain")
    vHora.SetFocus

End

Public Sub setDate(d As Date)

    vFecha.Value = d

End

Public Sub mnuAdifExport_Click()

    FeADIF.ShowModal()

End

Public Sub mnuDXCC_Click()

    FSummary.getSummary(1)

End

Public Sub txtModeChange_Change()

    If modificando = False Then
        If $mode = "AM" Or $mode = "FM" Or $mode = "CW" Or $mode = "SSB" Or $mode = "USB" Or $mode = "LSB" Or $mode = "RTTY" Then
            Try cboModo.Text = txtModeChange.Text
        Endif
    Endif

End

Public Sub help_Click()

    Desktop.Open("http://code.google.com/p/dfhlog/w/list")

End

Public Sub mnuWAC_Click()

    FSummary.getSummary(2)

End

Public Sub mnuWAS_Click()

    FSummary.getSummary(3)

End

Public Sub mnuUSACA_Click()

    FSummary.getSummary(4)

End

Public Sub mnuIOTA_Click()

    FSummary.getSummary(5)

End

Public Sub mnuTPEA_Click()

    FSummary.getSummary(6)

End

Public Sub mnuMGridSq_Click()

    FSquares.getSummary(1)

End

Public Sub mnuGridSq_Click()

    FSquares.getSummary(2)

End

Public Sub mnuInitials_Click()

    FSquares.getSummary(3)

End

Public Sub mnuGStats_Click()

    FStats.Show

End

Public Sub mnuQSLDesign_Click()

    FDesign.ShowModal

End

Public Sub mnuLblDesign_Click()

    FSetup.ShowModal

End

Public Sub mnuGoPrintQSLs_Click()

    FDesign.printQSLs

End

Public Sub mnuGoPrintLbls_Click()

    FPreview.ShowModal

End

Public Sub mnuQueue_Click()

    FQueue.Show()

End

Public Sub btnWatch_Click()

    mnuRlog_Click()

End

Public Sub btnEditLast_Click()

    Dim id As Integer
    Dim hResult As Result

    If connDB() Then Return
    hResult = dbLog.cnLog.Exec("SELECT MAX(id) AS id FROM log;")
    id = CInt(hResult!id)
    modifyQSO(id)

End

Private Sub update_stats()

    Dim hres As Result
    Dim sql As String
    Dim banda, mode As String
    Dim sAux As String
    Dim i, iRow As Integer

    clearTblStats
    sql = "SELECT country, band, mode, qsl_rcvd FROM log WHERE country=&1 GROUP BY qsl_rcvd, mode, band ORDER BY qsl_rcvd;"
    If connDB() Then Return
    hres = dbLog.cnLog.Exec(sql, c.entity)
    statsEntity.Text = c.entity
    For Each hres
        If global.getBandas().Exist(hres!band) Then
            i = global.getBandas().Find(hres!band) + 1
            Select Case hres!mode
                Case "AM", "FM", "USB", "LSB", "SSB"
                    iRow = 0
                Case "CW"
                    iRow = 1
                Case Else
                    iRow = 2
            End Select

            If hres!qsl_rcvd = "Y" Then
                tblStats[iRow, i].Alignment = 3
                tblStats[iRow, i].Font = Font["Bold"]
                tblStats[iRow, i].BackColor = ini["Colores/Confirmado", Color.Orange]
                tblStats[iRow, i].ForeColor = Color.White
                tblStats[iRow, i].Text = ("C")
            Else
                tblStats[iRow, i].Alignment = 3
                tblStats[iRow, i].Font = Font["Bold"]
                tblStats[iRow, i].BackColor = ini["Colores/Trabajado", Color.Green]
                tblStats[iRow, i].ForeColor = Color.White
                tblStats[iRow, i].Text = ("W")
            Endif
            'PRINT "Digi " & sAux, hres!qsl_rcvd, hres!band
        Endif
    Next

Catch
    Message.Error(Error.Text & "\n" & Error.Where)

End

Private Sub prepareStatsGrid()

    Dim bands As String
    Dim i As Integer = 1

    tblStats.Rows.Count = 3
    tblStats.Columns.Count = global.getBandas().Count + 1
    tblStats.Columns[0].Text = ("Mode")
    tblStats[0, 0].Font = Font["Bold"]
    tblStats[1, 0].Font = Font["Bold"]
    tblStats[2, 0].Font = Font["Bold"]
    tblStats[0, 0].Text = ("Phone:")
    tblStats[1, 0].Text = ("CW:")
    tblStats[2, 0].Text = ("Digi:")

    For Each bands In global.getBandas()
        tblStats.Columns[i].Text = bands
        tblStats.Columns[i].Width = 50
        Inc i
    Next

End

Private Sub clearTblStats()

    tblStats.Clear
    tblStats[0, 0].Font = Font["Bold"]
    tblStats[1, 0].Font = Font["Bold"]
    tblStats[2, 0].Font = Font["Bold"]
    tblStats[0, 0].Text = ("Phone:")
    tblStats[1, 0].Text = ("CW:")
    tblStats[2, 0].Text = ("Digi:")

End

Public Sub TrayIcon1_Menu()

    Archivo.Popup()

End

Public Sub TrayIcon1_DblClick()

    Me.Visible = True

End

'*************************** XML-RPC fldigi ************************** need to install portmap to get it to work
Public Sub fldigiXMLRPC()
    'This retrieves the values of log fields from "fldigi" app
    'as in http://www.w1hkj.com/FldigiHelp/xmlrpc-control.html
    'Download binary at http://www.w1hkj.com/fldigi-distro/fldigi-3.11.4.bin.tgz
    'No installation needed!

    Dim RpcF As RpcFunction
    Dim client As RpcClient
    Dim hVar As New Variant[]

    hVar.Add(Null)
    RpcF = New RpcFunction("log.get_call", [3], 3) 'DataType and Ret are string. Tested with 'PRINT XmlRpc.xString'
    client = New RpcClient(RpcF)
    client.URL = "http://localhost:7362/RPC2"
    txtCall.Text = client.Call(hVar)                                                    'call
    RpcF = New RpcFunction("modem.get_name", [3], 3)
    client = New RpcClient(RpcF)
    client.URL = "http://localhost:7362/RPC2"
    txtComment.Text = client.Call(hVar)                                                 'modem
    RpcF = New RpcFunction("main.get_sideband", [3], 3)
    client = New RpcClient(RpcF)
    client.URL = "http://localhost:7362/RPC2"
    cboModo.Text = client.Call(hVar)                                                    'mode (sideband)
    RpcF = New RpcFunction("log.get_frequency", [3], 3)
    client = New RpcClient(RpcF)
    client.URL = "http://localhost:7362/RPC2"                                           'freq
    If global.pidOf("rigctld") = Null Then txtFreq.Text = Left(client.Call(hVar), Len(client.Call(hVar)) - 2)
    RpcF = New RpcFunction("log.get_rst_in", [3], 3)
    client = New RpcClient(RpcF)
    client.URL = "http://localhost:7362/RPC2"
    txtRSTr.Text = client.Call(hVar)                                                    'rst r
    RpcF = New RpcFunction("log.get_rst_out", [3], 3)
    client = New RpcClient(RpcF)
    client.URL = "http://localhost:7362/RPC2"
    txtRSTe.Text = client.Call(hVar)                                                    'rst s
    RpcF = New RpcFunction("log.get_locator", [3], 3)
    client = New RpcClient(RpcF)
    client.URL = "http://localhost:7362/RPC2"
    txtLocQSO.Text = client.Call(hVar)                                                 'locator
    RpcF = New RpcFunction("log.get_name", [3], 3)
    client = New RpcClient(RpcF)
    client.URL = "http://localhost:7362/RPC2"
    txtNameQSO.Text = client.Call(hVar)                                                 'name
    RpcF = New RpcFunction("log.get_qth", [3], 3)
    client = New RpcClient(RpcF)
    client.URL = "http://localhost:7362/RPC2"
    txtQTHqso.Text = client.Call(hVar)                                                  'qth
Catch
    Debug Error.Text, Error.Where

End

Public Sub fldigiClearfiedls()
    'This clean the  log fields in "fldigi" app
    'Does not send/return any values, but no way to match xml-rpc value types to "nil",
    'so it throws an error

    Dim RpcF As RpcFunction
    Dim client As RpcClient
    Dim hVar As New Variant[]

    hVar.Add("nil")

    RpcF = New RpcFunction("log.clear", [XmlRpc.xString], XmlRpc.xString) 'DataType and Ret are null
    client = New RpcClient(RpcF)
    client.URL = "http://localhost:7362/RPC2"
    client.Call(hVar)
Catch
    'ignore
    'PRINT Error.Text, Error.Where

End

Public Sub btnQuick_Click()     'toggle button

    Dim hCtl As Control

    For Each hCtl In FMain.Controls
        If hCtl Is TextBox Or hCtl Is ComboBox Or hCtl Is CheckBox Or hCtl Is ValueBox Or hCtl Is Button Then
            If hCtl.Tag = "exclude" Then
                If btnQuick.Value = True Then
                    hCtl.Enabled = False
                    ' [GB2:FCOL] txtRSTe.ForeColor = Color.DarkGray
                    txtRSTe.Foreground = Color.DarkGray
                    ' [GB2:FCOL] txtRSTr.ForeColor = Color.DarkGray
                    txtRSTr.Foreground = Color.DarkGray
                Else
                    hCtl.Enabled = True
                    txtRSTe.Text = ""
                    txtRSTr.Text = ""
                    ' [GB2:FCOL] txtRSTe.ForeColor = Color.Black
                    txtRSTe.Foreground = Color.Black
                    ' [GB2:FCOL] txtRSTr.ForeColor = Color.Black
                    txtRSTr.Foreground = Color.Black
                Endif
            Endif
        Endif
    Next

End

Private Function cBand_Read() As String

    Return cboFreq.Text

End

Public Sub btnBandMap_Click()

    If btnBandMap.Value Then
        FBandMap.Show
    Else
        FBandMap.Close
    Endif

End

Public Sub bandmapToggle()

    btnBandMap.Value = False

End

Public Sub setFreq(qrg As Float)

    Dim S As String

    qrg = Round(qrg, -4) * 1000
    qrg = CStr(qrg)

    If sktHamlib.Status = Net.Connected Then 'cambiar freq CAT si esta conn
        S = "F " & qrg & "\r\n"
        'DEBUG S
        Try Write #sktHamlib, S, Len(S)
    Endif

End

Public Sub Form_KeyPress()

    If Key.Control And (Key.Code = Asc("L") Or Key.Code = Asc("l")) Then txtLocQSO.SetFocus
    If Key.Control And (Key.Code = Asc("N") Or Key.Code = Asc("n")) Then txtNameQSO.SetFocus
    If Key.Control And (Key.Code = Asc("M") Or Key.Code = Asc("m")) Then txtComment.SetFocus
    If Key.Control And (Key.Code = Asc("Q") Or Key.Code = Asc("q")) Then txtQTHqso.SetFocus
    If Key.Control And (Key.Code = Asc("Z") Or Key.Code = Asc("z")) Then txtCall.SetFocus

End

Public Sub Form_Drop()

    Dim ddata As String

    ddata = Trim$(Drag.Data)
    If Right$(ddata, 2) = "db" Then
        ddata = Right$(ddata, - 7)
        ini["Log/File"] = ddata
        ini.Save()
        dbLog.CloseDB()
        dbLog.connDB(ddata)
        lblPath.Text = "Log: " & ddata
        fillData() 'cargar datos log
    Else
        Stop Event
    Endif

Catch
    Message.Error(("Error drag/drop Log\n") & Error.Text & "\n" & Error.Where)

End

Public Sub btnShwqrz_Click()

    If ini["qrzCom/Value"] = 3 Then
        Desktop.Open("http://www.hamqth.com/search.php?callsign=" & $homecall)
    Else
        Desktop.Open("http://www.qrz.com/db/" & $homecall)
    Endif

End
