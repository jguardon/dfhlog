' Gambas class file
' dfhLog- Hamradio LogBook
'     Copyright (C) 2009  Jesús Guardón, EA7DFH <ea7dfh@gmail.com>
' 
'     This program is free software: you can redistribute it and/or modify
'     it under the terms of the GNU General Public License as published by
'     the Free Software Foundation, either version 3 of the License, or
'     (at your option) any later version.
' 
'     This program is distributed in the hope that it will be useful,
'     but WITHOUT ANY WARRANTY; without even the implied warranty of
'     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
'     GNU General Public License for more details.
' 
'     You should have received a copy of the GNU General Public License
'     along with this program.  If not, see <http://www.gnu.org/licenses/>.

PRIVATE hTable AS Table
PRIVATE i AS Integer = 0
PRIVATE pStarted AS Boolean = FALSE

PUBLIC PROCEDURE CreateTableTemp()

  DIM hres AS Result
    lblStage.Text = ("Creating temp table...")  
    IF dbLog.connDB(FMain.ini["Log/File"]) THEN RETURN 
    IF dbLog.cnLog.Tables.Exist("temp") THEN dbLog.cnLog.Tables.Remove("temp")
    pb.Value = 0.25
    hTable = dbLog.cnLog.Tables.Add("temp")

  WITH hTable

    .Fields.Add("id", db.Serial)
    .Fields.Add("qso_date", db.Date)
    .Fields.Add("time_on", db.String, 8)
    .Fields.Add("time_off", db.String, 8)
    .Fields.Add("call", db.String, 20)
    .Fields.Add("freq", db.String, 15)
    .Fields.Add("freq_rx", db.String, 15)
    .Fields.Add("band", db.String, 5)
    .Fields.Add("mode", db.String, 8)
    .Fields.Add("prop_mode", db.String, 5)
    .Fields.Add("rst_rcvd", db.String, 3)
    .Fields.Add("rst_sent", db.String, 3)
    .Fields.Add("name", db.String, 20)
    .Fields.Add("gridsquare", db.String, 6)
    .Fields.Add("qth", db.String, 50)
    .Fields.Add("comment", db.String, 50)
    .Fields.Add("qsl_sent", db.String, 1)
    .Fields.Add("qsl_rcvd", db.String, 1)
    .Fields.Add("qslsdate", db.Date)
    .Fields.Add("qslrdate", db.Date)
    .Fields.Add("qsl_via", db.String, 10)
    .Fields.Add("pfx", db.String, 5)
    .Fields.Add("cont", db.String, 3)
    .Fields.Add("cqz", db.Integer)
    .Fields.Add("ituz", db.Integer)
    .Fields.Add("state", db.String, 3)
    .Fields.Add("cnty", db.String, 20)
    .Fields.Add("iota", db.String, 10)
    .Fields.Add("operator", db.String, 20)
    .Fields.Add("tx_pwr", db.String, 10)
    .Fields.Add("my_gridsquare", db.String, 6)
    .Fields.Add("sat_name", db.String, 20)
    .Fields.Add("sat_mode", db.String, 10)
    .Fields.Add("email", db.String, 30)
    .Fields.Add("country", db.String, 30)
    .Fields.Add("dxcc", db.Integer)
    .Fields.Add("TPEA", db.String, 2)
    .Fields.Add("distance", db.Float)
    
     .PrimaryKey = ["id"]

    .Update

  END WITH
    pb.Value = 0.5
    copyData()
    lblStage.Text = ("Finished!")
    dbLog.cnLog.Exec("VACUUM")
    dbLog.CloseDB()
    
    ME.Close()
    
    CATCH 
        Message.Error(("Error in CreateTableTemp:\n") & Error.Text)
    
END

PUBLIC PROCEDURE CreateTableLog()
  
  DIM hres AS Result
    lblStage.Text = ("Recreating log table...")
    pb.Value = 0
    IF dbLog.connDB(FMain.ini["Log/File"]) THEN RETURN 
    IF dbLog.cnLog.Tables.Exist("log") THEN dbLog.cnLog.Tables.Remove("log")
    hTable = dbLog.cnLog.Tables.Add("log")

  WITH hTable

    .Fields.Add("id", db.Serial)
    .Fields.Add("qso_date", db.Date)
    .Fields.Add("time_on", db.String, 8)
    .Fields.Add("time_off", db.String, 8)
    .Fields.Add("call", db.String, 20)
    .Fields.Add("freq", db.String, 15)
    .Fields.Add("freq_rx", db.String, 15)
    .Fields.Add("band", db.String, 5)
    .Fields.Add("mode", db.String, 8)
    .Fields.Add("prop_mode", db.String, 5)
    .Fields.Add("rst_rcvd", db.String, 3)
    .Fields.Add("rst_sent", db.String, 3)
    .Fields.Add("name", db.String, 20)
    .Fields.Add("gridsquare", db.String, 6)
    .Fields.Add("qth", db.String, 50)
    .Fields.Add("comment", db.String, 50)
    .Fields.Add("qsl_sent", db.String, 1)
    .Fields.Add("qsl_rcvd", db.String, 1)
    .Fields.Add("qslsdate", db.Date)
    .Fields.Add("qslrdate", db.Date)
    .Fields.Add("qsl_via", db.String, 10)
    .Fields.Add("pfx", db.String, 5)
    .Fields.Add("cont", db.String, 3)
    .Fields.Add("cqz", db.Integer)
    .Fields.Add("ituz", db.Integer)
    .Fields.Add("state", db.String, 3)
    .Fields.Add("cnty", db.String, 20)
    .Fields.Add("iota", db.String, 10)
    .Fields.Add("operator", db.String, 20)
    .Fields.Add("tx_pwr", db.String, 10)
    .Fields.Add("my_gridsquare", db.String, 6)
    .Fields.Add("sat_name", db.String, 20)
    .Fields.Add("sat_mode", db.String, 10)
    .Fields.Add("email", db.String, 30)
    .Fields.Add("country", db.String, 30)
    .Fields.Add("dxcc", db.Integer)
    .Fields.Add("TPEA", db.String, 2)
    .Fields.Add("distance", db.Float)
    
     .PrimaryKey = ["id"]

    .Update

  END WITH
    WAIT 0.2
    pb.Value = 1
    restoreData()
    
    CATCH 
        Message.Error(("Error in CreateTableLog:\n") & Error.Text)
    
END

PUBLIC PROCEDURE copyData()
    DIM hres AS Result
    DIM sql AS String
    pb.Value = 0.75  
    lblStage.Text = ("Backing up data...")
    dbLog.cnLog.Begin()
    sql = "INSERT INTO temp SELECT * FROM log ORDER BY qso_date, time_on;"
    
    hres = dbLog.cnLog.Exec(sql)
    pb.Value = 1
    
    CreateTableLog()
    
    CATCH 
        Message.Error(("Error in CopyData:\n") & Error.Text)
  
END

PUBLIC PROCEDURE restoreData()

    DIM hres AS Result
    DIM rf AS ResultField    
    DIM sql, sql2 AS String
    lblStage.Text = ("Restoring data...")
    pb.Value = 0  
    
    sql = "SELECT * FROM temp ORDER BY qso_date, time_on;"
     
    sql2 = "INSERT INTO log VALUES (&1,&2,&3,&4,&5,&6,&7,&8,&9,&10,&11,&12,&13,&14,&15,&16,&17,&18," &
              "&19,&20,&21,&22,&23,&24,&25,&26,&27,&28,&29,&30,&31,&32,&33,&34,&35,&36,&37,&38);"
    
    hres = dbLog.cnLog.Exec(sql)
    i = hres.Count
    WHILE hres.Available
        pb.Value = 1 / i
        dbLog.cnLog.Exec(sql2, "", hres!qso_date, hres!time_on, hres!time_off, hres!call, hres!freq, hres!freq_rx, hres!band, hres!mode, hres!prop_mode, hres!rst_rcvd, hres!rst_sent, hres!name, hres!gridsquare, hres!qth, hres!comment, hres!qsl_sent, hres!qsl_rcvd, hres!qslsdate, hres!qslrdate, hres!qsl_via, hres!pfx, hres!cont, hres!cqz, hres!ituz, hres!state, hres!cnty, hres!iota, hres!operator, hres!tx_pwr, hres!my_gridsquare, hres!sat_name, hres!sat_mode, hres!email, hres!country, hres!dxcc, hres!TPEA, hres!distance)                
        hres.MoveNext()
        DEC i    
    WEND
    ' a workaround to get rid of NULL fields
    lblStage.Text = ("Cleaning up...")
    hres = dbLog.cnLog.Exec("SELECT * FROM log")
    pb.Value = 0
    i = hres.Fields.Count
    FOR EACH rf IN hres.Fields
        pb.Value = 1 / i
        WAIT 0.01
        sql = "UPDATE log set " & rf.Name & "='' WHERE " & rf.Name & " ISNULL;"
        dbLog.cnLog.Exec(sql)        
        DEC i        
    NEXT 
    pb.Value = 1 
    
    IF dbLog.cnLog.Tables.Exist("temp") THEN dbLog.cnLog.Tables.Remove("temp")
    dbLog.cnLog.Commit()
    CATCH 
        Message.Error(("Error in RestoreData:\n") & Error.Text)    
  
END

PUBLIC SUB Form_Close()
    DEC Application.Busy  
    dbLog.CloseDB()

END

PUBLIC SUB btnCancel_Click()
    IF pStarted = TRUE THEN 
      dbLog.cnLog.Rollback()
      Message.Warning(("Compacting DB has been aborted!"))
    ENDIF   
    ME.Close()

END

PUBLIC SUB btnOK_Click()
    Label1.ForeColor = Color.Red
    Label1.Text = ("Compacting and recalculating records\nPlease, wait for a while...")
    INC Application.Busy
    pStarted = TRUE    
    btnOK.Enabled = FALSE
    WAIT 0.5
    CreateTableTemp()

END